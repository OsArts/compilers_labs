strict digraph  {
	graph [ordering=out,
		rankdir=TB
	];
	node [label="\N"];
	0	 [label=programm];
	1	 [label=main_class];
	0 -> 1;
	43	 [label=class_list];
	0 -> 43;
	122	 [label=","];
	0 -> 122;
	40	 [label=Factorial];
	1 -> 40;
	41	 [label="{"];
	1 -> 41;
	39	 [label=class];
	1 -> 39;
	42	 [label="}"];
	1 -> 42;
	2	 [label=main_method];
	1 -> 2;
	27	 [label=public];
	2 -> 27;
	35	 [label=a];
	2 -> 35;
	36	 [label=")"];
	2 -> 36;
	28	 [label=static];
	2 -> 28;
	34	 [label="]"];
	2 -> 34;
	3	 [label=statements_list];
	2 -> 3;
	38	 [label="}"];
	2 -> 38;
	33	 [label="["];
	2 -> 33;
	37	 [label="{"];
	2 -> 37;
	30	 [label=main];
	2 -> 30;
	32	 [label=String];
	2 -> 32;
	31	 [label="("];
	2 -> 31;
	29	 [label=void];
	2 -> 29;
	26	 [label=","];
	3 -> 26;
	4	 [label=print];
	3 -> 4;
	22	 [label=println];
	4 -> 22;
	23	 [label="("];
	4 -> 23;
	21	 [label="."];
	4 -> 21;
	24	 [label=")"];
	4 -> 24;
	5	 [label=method_call];
	4 -> 5;
	20	 [label=out];
	4 -> 20;
	25	 [label=";"];
	4 -> 25;
	18	 [label=System];
	4 -> 18;
	19	 [label="."];
	4 -> 19;
	12	 [label=expressions];
	5 -> 12;
	6	 [label=new_identifier_expression];
	5 -> 6;
	11	 [label=ComputeFac];
	5 -> 11;
	17	 [label=")"];
	5 -> 17;
	15	 [label="."];
	5 -> 15;
	16	 [label="("];
	5 -> 16;
	9	 [label="("];
	6 -> 9;
	8	 [label=new];
	6 -> 8;
	10	 [label=")"];
	6 -> 10;
	7	 [label=Fac];
	6 -> 7;
	13	 [label=10];
	12 -> 13;
	14	 [label=","];
	12 -> 14;
	44	 [label=class];
	43 -> 44;
	121	 [label=","];
	43 -> 121;
	46	 [label=declaration_list];
	44 -> 46;
	45	 [label=None];
	44 -> 45;
	117	 [label=class];
	44 -> 117;
	118	 [label=Fac];
	44 -> 118;
	119	 [label="{"];
	44 -> 119;
	120	 [label="}"];
	44 -> 120;
	47	 [label=method];
	46 -> 47;
	116	 [label=","];
	46 -> 116;
	48	 [label=type];
	47 -> 48;
	50	 [label=identifier];
	47 -> 50;
	53	 [label=args];
	47 -> 53;
	63	 [label=statements_list];
	47 -> 63;
	107	 [label=num_aux];
	47 -> 107;
	108	 [label=public];
	47 -> 108;
	109	 [label=","];
	47 -> 109;
	110	 [label="("];
	47 -> 110;
	111	 [label=")"];
	47 -> 111;
	112	 [label="{"];
	47 -> 112;
	113	 [label=return];
	47 -> 113;
	114	 [label=";"];
	47 -> 114;
	115	 [label="}"];
	47 -> 115;
	49	 [label=int];
	48 -> 49;
	51	 [label=ComputeFac];
	50 -> 51;
	52	 [label=","];
	50 -> 52;
	54	 [label=args];
	53 -> 54;
	62	 [label=","];
	53 -> 62;
	55	 [label=arg];
	54 -> 55;
	58	 [label=arg];
	54 -> 58;
	61	 [label=","];
	54 -> 61;
	56	 [label=num];
	55 -> 56;
	57	 [label=int];
	55 -> 57;
	59	 [label=test];
	58 -> 59;
	60	 [label=boolean];
	58 -> 60;
	64	 [label=variable];
	63 -> 64;
	69	 [label=if];
	63 -> 69;
	106	 [label=","];
	63 -> 106;
	65	 [label=num_aux];
	64 -> 65;
	66	 [label=int];
	64 -> 66;
	67	 [label=","];
	64 -> 67;
	68	 [label=";"];
	64 -> 68;
	70	 [label=binary_expression];
	69 -> 70;
	74	 [label=assignment];
	69 -> 74;
	79	 [label=else];
	69 -> 79;
	103	 [label=if];
	69 -> 103;
	104	 [label="("];
	69 -> 104;
	105	 [label=")"];
	69 -> 105;
	71	 [label=num];
	70 -> 71;
	72	 [label=1];
	70 -> 72;
	73	 [label="<"];
	70 -> 73;
	75	 [label=num_aux];
	74 -> 75;
	76	 [label=1];
	74 -> 76;
	77	 [label="="];
	74 -> 77;
	78	 [label=";"];
	74 -> 78;
	80	 [label=assignment];
	79 -> 80;
	102	 [label=else];
	79 -> 102;
	81	 [label=num_aux];
	80 -> 81;
	82	 [label=binary_expression];
	80 -> 82;
	100	 [label="="];
	80 -> 100;
	101	 [label=";"];
	80 -> 101;
	83	 [label=num];
	82 -> 83;
	84	 [label=parenthesis_expression];
	82 -> 84;
	99	 [label="*"];
	82 -> 99;
	85	 [label=method_call];
	84 -> 85;
	97	 [label="("];
	84 -> 97;
	98	 [label=")"];
	84 -> 98;
	86	 [label=this];
	85 -> 86;
	87	 [label=ComputeFac];
	85 -> 87;
	88	 [label=expressions];
	85 -> 88;
	94	 [label="."];
	85 -> 94;
	95	 [label="("];
	85 -> 95;
	96	 [label=")"];
	85 -> 96;
	89	 [label=binary_expression];
	88 -> 89;
	93	 [label=","];
	88 -> 93;
	90	 [label=num];
	89 -> 90;
	91	 [label=1];
	89 -> 91;
	92	 [label="-"];
	89 -> 92;
}
