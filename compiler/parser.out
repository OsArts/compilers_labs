Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programm
Rule 1     programm -> main_class class_list
Rule 2     empty -> <empty>
Rule 3     class_list -> empty
Rule 4     class_list -> class_list class
Rule 5     main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE
Rule 6     main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE
Rule 7     class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE
Rule 8     extends -> empty
Rule 9     extends -> EXTENDS IDENTIFIER
Rule 10    declaration_list -> empty
Rule 11    declaration_list -> declaration_list field
Rule 12    declaration_list -> declaration_list method
Rule 13    field -> single_or_array_var SEMICOLON
Rule 14    single_or_array_var -> INT identifier_or_brackets
Rule 15    single_or_array_var -> BOOLEAN IDENTIFIER
Rule 16    single_or_array_var -> IDENTIFIER IDENTIFIER
Rule 17    method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE
Rule 18    params_list -> empty
Rule 19    params_list -> args_list
Rule 20    args_list -> arg
Rule 21    args_list -> args_list COMMA arg
Rule 22    arg -> single_or_array_var
Rule 23    statements_list -> empty
Rule 24    statements_list -> statements_list statement
Rule 25    statement -> INT identifier_or_brackets SEMICOLON
Rule 26    statement -> BOOLEAN IDENTIFIER SEMICOLON
Rule 27    statement -> IDENTIFIER identifier_or_assignment SEMICOLON
Rule 28    identifier_or_brackets -> IDENTIFIER
Rule 29    identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER
Rule 30    identifier_or_assignment -> IDENTIFIER
Rule 31    identifier_or_assignment -> ASSIGNMENT expression
Rule 32    identifier_or_assignment -> LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT expression
Rule 33    statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
Rule 34    else_statement -> empty
Rule 35    else_statement -> ELSE statement
Rule 36    statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 37    statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 38    statement -> LEFT_BRACE statements_list RIGHT_BRACE
Rule 39    expression -> array_element_expression
Rule 40    expression -> field_expression
Rule 41    expression -> call_method_expression
Rule 42    expression -> binary_expression
Rule 43    expression -> parenthesis_expression
Rule 44    expression -> unary_expression
Rule 45    expression -> new_expression
Rule 46    expression -> identifier_expression
Rule 47    expression -> integer_literal_expression
Rule 48    expression -> boolean_expression
Rule 49    expression -> this_expression
Rule 50    expression -> null_expression
Rule 51    array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET
Rule 52    field_expression -> expression POINT IDENTIFIER
Rule 53    call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
Rule 54    expression_list -> empty
Rule 55    expression_list -> nonempty_expression_list
Rule 56    nonempty_expression_list -> expression
Rule 57    nonempty_expression_list -> expression_list COMMA expression
Rule 58    binary_expression -> expression OR expression
Rule 59    binary_expression -> expression AND expression
Rule 60    binary_expression -> expression EQUAL expression
Rule 61    binary_expression -> expression NOT_EQUAL expression
Rule 62    binary_expression -> expression GREATER expression
Rule 63    binary_expression -> expression LESS expression
Rule 64    binary_expression -> expression PLUS expression
Rule 65    binary_expression -> expression MINUS expression
Rule 66    binary_expression -> expression TIMES expression
Rule 67    binary_expression -> expression DIVIDE expression
Rule 68    parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 69    unary_expression -> MINUS expression
Rule 70    unary_expression -> NOT expression
Rule 71    new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET
Rule 72    new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 73    identifier_expression -> IDENTIFIER
Rule 74    integer_literal_expression -> INTEGER_LITERAL
Rule 75    boolean_expression -> TRUE
Rule 76    boolean_expression -> FALSE
Rule 77    this_expression -> THIS
Rule 78    null_expression -> NULL

Terminals, with rules where they appear

AND                  : 59
ASSIGNMENT           : 31 32
BOOLEAN              : 15 26
CLASS                : 5 7
COMMA                : 21 57
DIVIDE               : 67
ELSE                 : 35
EQUAL                : 60
EXTENDS              : 9
FALSE                : 76
GREATER              : 62
IDENTIFIER           : 5 6 7 9 15 16 16 26 27 28 29 30 52 53 72 73
IF                   : 33
INT                  : 14 25 71
INTEGER_LITERAL      : 74
LEFT_BRACE           : 5 6 7 17 38
LEFT_BRACKET         : 6 29 32 51 71
LEFT_PARENTHESIS     : 6 17 33 36 37 53 68 72
LESS                 : 63
MAIN                 : 6
MINUS                : 65 69
NEW                  : 71 72
NOT                  : 70
NOT_EQUAL            : 61
NULL                 : 78
OR                   : 58
OUT                  : 37
PLUS                 : 64
POINT                : 37 37 52 53
PRINTLN              : 37
PUBLIC               : 6 17
RETURN               : 17
RIGHT_BRACE          : 5 6 7 17 38
RIGHT_BRACKET        : 6 29 32 51 71
RIGHT_PARENTHESIS    : 6 17 33 36 37 53 68 72
SEMICOLON            : 13 17 25 26 27 37
STATIC               : 6
STRING               : 6
SYSTEM               : 37
THIS                 : 77
TIMES                : 66
TRUE                 : 75
VOID                 : 6
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

arg                  : 20 21
args_list            : 19 21
array_element_expression : 39
binary_expression    : 42
boolean_expression   : 48
call_method_expression : 41
class                : 4
class_list           : 1 4
declaration_list     : 7 11 12
else_statement       : 33
empty                : 3 8 10 18 23 34 54
expression           : 17 31 32 32 33 36 37 51 51 52 53 56 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 69 70 71
expression_list      : 53 57
extends              : 7
field                : 11
field_expression     : 40
identifier_expression : 46
identifier_or_assignment : 27
identifier_or_brackets : 14 25
integer_literal_expression : 47
main_class           : 1
main_method          : 5
method               : 12
new_expression       : 45
nonempty_expression_list : 55
null_expression      : 50
params_list          : 17
parenthesis_expression : 43
programm             : 0
single_or_array_var  : 13 17 22
statement            : 24 33 35 36
statements_list      : 6 17 24 38
this_expression      : 49
unary_expression     : 44

Parsing method: LALR

state 0

    (0) S' -> . programm
    (1) programm -> . main_class class_list
    (5) main_class -> . CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    CLASS           shift and go to state 3

    main_class                     shift and go to state 1
    programm                       shift and go to state 2

state 1

    (1) programm -> main_class . class_list
    (3) class_list -> . empty
    (4) class_list -> . class_list class
    (2) empty -> .

    CLASS           reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    class_list                     shift and go to state 4
    empty                          shift and go to state 5

state 2

    (0) S' -> programm .



state 3

    (5) main_class -> CLASS . IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    IDENTIFIER      shift and go to state 6


state 4

    (1) programm -> main_class class_list .
    (4) class_list -> class_list . class
    (7) class -> . CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    $end            reduce using rule 1 (programm -> main_class class_list .)
    CLASS           shift and go to state 7

    class                          shift and go to state 8

state 5

    (3) class_list -> empty .

    CLASS           reduce using rule 3 (class_list -> empty .)
    $end            reduce using rule 3 (class_list -> empty .)


state 6

    (5) main_class -> CLASS IDENTIFIER . LEFT_BRACE main_method RIGHT_BRACE

    LEFT_BRACE      shift and go to state 9


state 7

    (7) class -> CLASS . IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 10


state 8

    (4) class_list -> class_list class .

    CLASS           reduce using rule 4 (class_list -> class_list class .)
    $end            reduce using rule 4 (class_list -> class_list class .)


state 9

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE . main_method RIGHT_BRACE
    (6) main_method -> . PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    PUBLIC          shift and go to state 12

    main_method                    shift and go to state 11

state 10

    (7) class -> CLASS IDENTIFIER . extends LEFT_BRACE declaration_list RIGHT_BRACE
    (8) extends -> . empty
    (9) extends -> . EXTENDS IDENTIFIER
    (2) empty -> .

    EXTENDS         shift and go to state 14
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    extends                        shift and go to state 13
    empty                          shift and go to state 15

state 11

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 16


state 12

    (6) main_method -> PUBLIC . STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    STATIC          shift and go to state 17


state 13

    (7) class -> CLASS IDENTIFIER extends . LEFT_BRACE declaration_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 18


state 14

    (9) extends -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 19


state 15

    (8) extends -> empty .

    LEFT_BRACE      reduce using rule 8 (extends -> empty .)


state 16

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .

    CLASS           reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)
    $end            reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)


state 17

    (6) main_method -> PUBLIC STATIC . VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    VOID            shift and go to state 20


state 18

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE . declaration_list RIGHT_BRACE
    (10) declaration_list -> . empty
    (11) declaration_list -> . declaration_list field
    (12) declaration_list -> . declaration_list method
    (2) empty -> .

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    PUBLIC          reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 22
    declaration_list               shift and go to state 21

state 19

    (9) extends -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 9 (extends -> EXTENDS IDENTIFIER .)


state 20

    (6) main_method -> PUBLIC STATIC VOID . MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    MAIN            shift and go to state 23


state 21

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list . RIGHT_BRACE
    (11) declaration_list -> declaration_list . field
    (12) declaration_list -> declaration_list . method
    (13) field -> . single_or_array_var SEMICOLON
    (17) method -> . PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE
    (14) single_or_array_var -> . INT identifier_or_brackets
    (15) single_or_array_var -> . BOOLEAN IDENTIFIER
    (16) single_or_array_var -> . IDENTIFIER IDENTIFIER

    RIGHT_BRACE     shift and go to state 26
    PUBLIC          shift and go to state 29
    INT             shift and go to state 24
    BOOLEAN         shift and go to state 28
    IDENTIFIER      shift and go to state 31

    single_or_array_var            shift and go to state 25
    field                          shift and go to state 27
    method                         shift and go to state 30

state 22

    (10) declaration_list -> empty .

    RIGHT_BRACE     reduce using rule 10 (declaration_list -> empty .)
    PUBLIC          reduce using rule 10 (declaration_list -> empty .)
    INT             reduce using rule 10 (declaration_list -> empty .)
    BOOLEAN         reduce using rule 10 (declaration_list -> empty .)
    IDENTIFIER      reduce using rule 10 (declaration_list -> empty .)


state 23

    (6) main_method -> PUBLIC STATIC VOID MAIN . LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 32


state 24

    (14) single_or_array_var -> INT . identifier_or_brackets
    (28) identifier_or_brackets -> . IDENTIFIER
    (29) identifier_or_brackets -> . LEFT_BRACKET RIGHT_BRACKET IDENTIFIER

    IDENTIFIER      shift and go to state 34
    LEFT_BRACKET    shift and go to state 33

    identifier_or_brackets         shift and go to state 35

state 25

    (13) field -> single_or_array_var . SEMICOLON

    SEMICOLON       shift and go to state 36


state 26

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .

    CLASS           reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)
    $end            reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)


state 27

    (11) declaration_list -> declaration_list field .

    RIGHT_BRACE     reduce using rule 11 (declaration_list -> declaration_list field .)
    PUBLIC          reduce using rule 11 (declaration_list -> declaration_list field .)
    INT             reduce using rule 11 (declaration_list -> declaration_list field .)
    BOOLEAN         reduce using rule 11 (declaration_list -> declaration_list field .)
    IDENTIFIER      reduce using rule 11 (declaration_list -> declaration_list field .)


state 28

    (15) single_or_array_var -> BOOLEAN . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 29

    (17) method -> PUBLIC . single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE
    (14) single_or_array_var -> . INT identifier_or_brackets
    (15) single_or_array_var -> . BOOLEAN IDENTIFIER
    (16) single_or_array_var -> . IDENTIFIER IDENTIFIER

    INT             shift and go to state 24
    BOOLEAN         shift and go to state 28
    IDENTIFIER      shift and go to state 31

    single_or_array_var            shift and go to state 38

state 30

    (12) declaration_list -> declaration_list method .

    RIGHT_BRACE     reduce using rule 12 (declaration_list -> declaration_list method .)
    PUBLIC          reduce using rule 12 (declaration_list -> declaration_list method .)
    INT             reduce using rule 12 (declaration_list -> declaration_list method .)
    BOOLEAN         reduce using rule 12 (declaration_list -> declaration_list method .)
    IDENTIFIER      reduce using rule 12 (declaration_list -> declaration_list method .)


state 31

    (16) single_or_array_var -> IDENTIFIER . IDENTIFIER

    IDENTIFIER      shift and go to state 39


state 32

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS . STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    STRING          shift and go to state 40


state 33

    (29) identifier_or_brackets -> LEFT_BRACKET . RIGHT_BRACKET IDENTIFIER

    RIGHT_BRACKET   shift and go to state 41


state 34

    (28) identifier_or_brackets -> IDENTIFIER .

    SEMICOLON       reduce using rule 28 (identifier_or_brackets -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 28 (identifier_or_brackets -> IDENTIFIER .)
    COMMA           reduce using rule 28 (identifier_or_brackets -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 28 (identifier_or_brackets -> IDENTIFIER .)


state 35

    (14) single_or_array_var -> INT identifier_or_brackets .

    SEMICOLON       reduce using rule 14 (single_or_array_var -> INT identifier_or_brackets .)
    LEFT_PARENTHESIS reduce using rule 14 (single_or_array_var -> INT identifier_or_brackets .)
    COMMA           reduce using rule 14 (single_or_array_var -> INT identifier_or_brackets .)
    RIGHT_PARENTHESIS reduce using rule 14 (single_or_array_var -> INT identifier_or_brackets .)


state 36

    (13) field -> single_or_array_var SEMICOLON .

    RIGHT_BRACE     reduce using rule 13 (field -> single_or_array_var SEMICOLON .)
    PUBLIC          reduce using rule 13 (field -> single_or_array_var SEMICOLON .)
    INT             reduce using rule 13 (field -> single_or_array_var SEMICOLON .)
    BOOLEAN         reduce using rule 13 (field -> single_or_array_var SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (field -> single_or_array_var SEMICOLON .)


state 37

    (15) single_or_array_var -> BOOLEAN IDENTIFIER .

    SEMICOLON       reduce using rule 15 (single_or_array_var -> BOOLEAN IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 15 (single_or_array_var -> BOOLEAN IDENTIFIER .)
    COMMA           reduce using rule 15 (single_or_array_var -> BOOLEAN IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 15 (single_or_array_var -> BOOLEAN IDENTIFIER .)


state 38

    (17) method -> PUBLIC single_or_array_var . LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 42


state 39

    (16) single_or_array_var -> IDENTIFIER IDENTIFIER .

    SEMICOLON       reduce using rule 16 (single_or_array_var -> IDENTIFIER IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 16 (single_or_array_var -> IDENTIFIER IDENTIFIER .)
    COMMA           reduce using rule 16 (single_or_array_var -> IDENTIFIER IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 16 (single_or_array_var -> IDENTIFIER IDENTIFIER .)


state 40

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING . LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    LEFT_BRACKET    shift and go to state 43


state 41

    (29) identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET . IDENTIFIER

    IDENTIFIER      shift and go to state 44


state 42

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS . params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE
    (18) params_list -> . empty
    (19) params_list -> . args_list
    (2) empty -> .
    (20) args_list -> . arg
    (21) args_list -> . args_list COMMA arg
    (22) arg -> . single_or_array_var
    (14) single_or_array_var -> . INT identifier_or_brackets
    (15) single_or_array_var -> . BOOLEAN IDENTIFIER
    (16) single_or_array_var -> . IDENTIFIER IDENTIFIER

    RIGHT_PARENTHESIS reduce using rule 2 (empty -> .)
    INT             shift and go to state 24
    BOOLEAN         shift and go to state 28
    IDENTIFIER      shift and go to state 31

    single_or_array_var            shift and go to state 45
    args_list                      shift and go to state 48
    arg                            shift and go to state 47
    params_list                    shift and go to state 49
    empty                          shift and go to state 46

state 43

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET . RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    RIGHT_BRACKET   shift and go to state 50


state 44

    (29) identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER .

    SEMICOLON       reduce using rule 29 (identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 29 (identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER .)
    COMMA           reduce using rule 29 (identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 29 (identifier_or_brackets -> LEFT_BRACKET RIGHT_BRACKET IDENTIFIER .)


state 45

    (22) arg -> single_or_array_var .

    COMMA           reduce using rule 22 (arg -> single_or_array_var .)
    RIGHT_PARENTHESIS reduce using rule 22 (arg -> single_or_array_var .)


state 46

    (18) params_list -> empty .

    RIGHT_PARENTHESIS reduce using rule 18 (params_list -> empty .)


state 47

    (20) args_list -> arg .

    COMMA           reduce using rule 20 (args_list -> arg .)
    RIGHT_PARENTHESIS reduce using rule 20 (args_list -> arg .)


state 48

    (19) params_list -> args_list .
    (21) args_list -> args_list . COMMA arg

    RIGHT_PARENTHESIS reduce using rule 19 (params_list -> args_list .)
    COMMA           shift and go to state 51


state 49

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list . RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 52


state 50

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET . IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 53


state 51

    (21) args_list -> args_list COMMA . arg
    (22) arg -> . single_or_array_var
    (14) single_or_array_var -> . INT identifier_or_brackets
    (15) single_or_array_var -> . BOOLEAN IDENTIFIER
    (16) single_or_array_var -> . IDENTIFIER IDENTIFIER

    INT             shift and go to state 24
    BOOLEAN         shift and go to state 28
    IDENTIFIER      shift and go to state 31

    single_or_array_var            shift and go to state 45
    arg                            shift and go to state 54

state 52

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS . LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_BRACE      shift and go to state 55


state 53

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER . RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 56


state 54

    (21) args_list -> args_list COMMA arg .

    COMMA           reduce using rule 21 (args_list -> args_list COMMA arg .)
    RIGHT_PARENTHESIS reduce using rule 21 (args_list -> args_list COMMA arg .)


state 55

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE . statements_list RETURN expression SEMICOLON RIGHT_BRACE
    (23) statements_list -> . empty
    (24) statements_list -> . statements_list statement
    (2) empty -> .

    RETURN          reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    statements_list                shift and go to state 57
    empty                          shift and go to state 58

state 56

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS . LEFT_BRACE statements_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 59


state 57

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list . RETURN expression SEMICOLON RIGHT_BRACE
    (24) statements_list -> statements_list . statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    RETURN          shift and go to state 60
    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 64

state 58

    (23) statements_list -> empty .

    RIGHT_BRACE     reduce using rule 23 (statements_list -> empty .)
    INT             reduce using rule 23 (statements_list -> empty .)
    BOOLEAN         reduce using rule 23 (statements_list -> empty .)
    IDENTIFIER      reduce using rule 23 (statements_list -> empty .)
    IF              reduce using rule 23 (statements_list -> empty .)
    WHILE           reduce using rule 23 (statements_list -> empty .)
    SYSTEM          reduce using rule 23 (statements_list -> empty .)
    LEFT_BRACE      reduce using rule 23 (statements_list -> empty .)
    RETURN          reduce using rule 23 (statements_list -> empty .)


state 59

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE . statements_list RIGHT_BRACE
    (23) statements_list -> . empty
    (24) statements_list -> . statements_list statement
    (2) empty -> .

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    statements_list                shift and go to state 69
    empty                          shift and go to state 58

state 60

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN . expression SEMICOLON RIGHT_BRACE
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    parenthesis_expression         shift and go to state 77
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    array_element_expression       shift and go to state 79
    null_expression                shift and go to state 83
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 91
    call_method_expression         shift and go to state 85

state 61

    (36) statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

    LEFT_PARENTHESIS shift and go to state 93


state 62

    (38) statement -> LEFT_BRACE . statements_list RIGHT_BRACE
    (23) statements_list -> . empty
    (24) statements_list -> . statements_list statement
    (2) empty -> .

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    statements_list                shift and go to state 94
    empty                          shift and go to state 58

state 63

    (33) statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement

    LEFT_PARENTHESIS shift and go to state 95


state 64

    (24) statements_list -> statements_list statement .

    RIGHT_BRACE     reduce using rule 24 (statements_list -> statements_list statement .)
    INT             reduce using rule 24 (statements_list -> statements_list statement .)
    BOOLEAN         reduce using rule 24 (statements_list -> statements_list statement .)
    IDENTIFIER      reduce using rule 24 (statements_list -> statements_list statement .)
    IF              reduce using rule 24 (statements_list -> statements_list statement .)
    WHILE           reduce using rule 24 (statements_list -> statements_list statement .)
    SYSTEM          reduce using rule 24 (statements_list -> statements_list statement .)
    LEFT_BRACE      reduce using rule 24 (statements_list -> statements_list statement .)
    RETURN          reduce using rule 24 (statements_list -> statements_list statement .)


state 65

    (27) statement -> IDENTIFIER . identifier_or_assignment SEMICOLON
    (30) identifier_or_assignment -> . IDENTIFIER
    (31) identifier_or_assignment -> . ASSIGNMENT expression
    (32) identifier_or_assignment -> . LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT expression

    IDENTIFIER      shift and go to state 98
    ASSIGNMENT      shift and go to state 96
    LEFT_BRACKET    shift and go to state 97

    identifier_or_assignment       shift and go to state 99

state 66

    (25) statement -> INT . identifier_or_brackets SEMICOLON
    (28) identifier_or_brackets -> . IDENTIFIER
    (29) identifier_or_brackets -> . LEFT_BRACKET RIGHT_BRACKET IDENTIFIER

    IDENTIFIER      shift and go to state 34
    LEFT_BRACKET    shift and go to state 33

    identifier_or_brackets         shift and go to state 100

state 67

    (37) statement -> SYSTEM . POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 101


state 68

    (26) statement -> BOOLEAN . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 102


state 69

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list . RIGHT_BRACE
    (24) statements_list -> statements_list . statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 103
    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 64

state 70

    (44) expression -> unary_expression .

    LEFT_BRACKET    reduce using rule 44 (expression -> unary_expression .)
    POINT           reduce using rule 44 (expression -> unary_expression .)
    OR              reduce using rule 44 (expression -> unary_expression .)
    AND             reduce using rule 44 (expression -> unary_expression .)
    EQUAL           reduce using rule 44 (expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> unary_expression .)
    GREATER         reduce using rule 44 (expression -> unary_expression .)
    LESS            reduce using rule 44 (expression -> unary_expression .)
    PLUS            reduce using rule 44 (expression -> unary_expression .)
    MINUS           reduce using rule 44 (expression -> unary_expression .)
    TIMES           reduce using rule 44 (expression -> unary_expression .)
    DIVIDE          reduce using rule 44 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 44 (expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 44 (expression -> unary_expression .)
    RIGHT_BRACKET   reduce using rule 44 (expression -> unary_expression .)
    COMMA           reduce using rule 44 (expression -> unary_expression .)


state 71

    (46) expression -> identifier_expression .

    LEFT_BRACKET    reduce using rule 46 (expression -> identifier_expression .)
    POINT           reduce using rule 46 (expression -> identifier_expression .)
    OR              reduce using rule 46 (expression -> identifier_expression .)
    AND             reduce using rule 46 (expression -> identifier_expression .)
    EQUAL           reduce using rule 46 (expression -> identifier_expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> identifier_expression .)
    GREATER         reduce using rule 46 (expression -> identifier_expression .)
    LESS            reduce using rule 46 (expression -> identifier_expression .)
    PLUS            reduce using rule 46 (expression -> identifier_expression .)
    MINUS           reduce using rule 46 (expression -> identifier_expression .)
    TIMES           reduce using rule 46 (expression -> identifier_expression .)
    DIVIDE          reduce using rule 46 (expression -> identifier_expression .)
    SEMICOLON       reduce using rule 46 (expression -> identifier_expression .)
    RIGHT_PARENTHESIS reduce using rule 46 (expression -> identifier_expression .)
    RIGHT_BRACKET   reduce using rule 46 (expression -> identifier_expression .)
    COMMA           reduce using rule 46 (expression -> identifier_expression .)


state 72

    (74) integer_literal_expression -> INTEGER_LITERAL .

    LEFT_BRACKET    reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    POINT           reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    OR              reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    AND             reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    GREATER         reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    LESS            reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    TIMES           reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    SEMICOLON       reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_BRACKET   reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 74 (integer_literal_expression -> INTEGER_LITERAL .)


state 73

    (45) expression -> new_expression .

    LEFT_BRACKET    reduce using rule 45 (expression -> new_expression .)
    POINT           reduce using rule 45 (expression -> new_expression .)
    OR              reduce using rule 45 (expression -> new_expression .)
    AND             reduce using rule 45 (expression -> new_expression .)
    EQUAL           reduce using rule 45 (expression -> new_expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> new_expression .)
    GREATER         reduce using rule 45 (expression -> new_expression .)
    LESS            reduce using rule 45 (expression -> new_expression .)
    PLUS            reduce using rule 45 (expression -> new_expression .)
    MINUS           reduce using rule 45 (expression -> new_expression .)
    TIMES           reduce using rule 45 (expression -> new_expression .)
    DIVIDE          reduce using rule 45 (expression -> new_expression .)
    SEMICOLON       reduce using rule 45 (expression -> new_expression .)
    RIGHT_PARENTHESIS reduce using rule 45 (expression -> new_expression .)
    RIGHT_BRACKET   reduce using rule 45 (expression -> new_expression .)
    COMMA           reduce using rule 45 (expression -> new_expression .)


state 74

    (78) null_expression -> NULL .

    SEMICOLON       reduce using rule 78 (null_expression -> NULL .)
    LEFT_BRACKET    reduce using rule 78 (null_expression -> NULL .)
    POINT           reduce using rule 78 (null_expression -> NULL .)
    OR              reduce using rule 78 (null_expression -> NULL .)
    AND             reduce using rule 78 (null_expression -> NULL .)
    EQUAL           reduce using rule 78 (null_expression -> NULL .)
    NOT_EQUAL       reduce using rule 78 (null_expression -> NULL .)
    GREATER         reduce using rule 78 (null_expression -> NULL .)
    LESS            reduce using rule 78 (null_expression -> NULL .)
    PLUS            reduce using rule 78 (null_expression -> NULL .)
    MINUS           reduce using rule 78 (null_expression -> NULL .)
    TIMES           reduce using rule 78 (null_expression -> NULL .)
    DIVIDE          reduce using rule 78 (null_expression -> NULL .)
    RIGHT_BRACKET   reduce using rule 78 (null_expression -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 78 (null_expression -> NULL .)
    COMMA           reduce using rule 78 (null_expression -> NULL .)


state 75

    (75) boolean_expression -> TRUE .

    LEFT_BRACKET    reduce using rule 75 (boolean_expression -> TRUE .)
    POINT           reduce using rule 75 (boolean_expression -> TRUE .)
    OR              reduce using rule 75 (boolean_expression -> TRUE .)
    AND             reduce using rule 75 (boolean_expression -> TRUE .)
    EQUAL           reduce using rule 75 (boolean_expression -> TRUE .)
    NOT_EQUAL       reduce using rule 75 (boolean_expression -> TRUE .)
    GREATER         reduce using rule 75 (boolean_expression -> TRUE .)
    LESS            reduce using rule 75 (boolean_expression -> TRUE .)
    PLUS            reduce using rule 75 (boolean_expression -> TRUE .)
    MINUS           reduce using rule 75 (boolean_expression -> TRUE .)
    TIMES           reduce using rule 75 (boolean_expression -> TRUE .)
    DIVIDE          reduce using rule 75 (boolean_expression -> TRUE .)
    SEMICOLON       reduce using rule 75 (boolean_expression -> TRUE .)
    RIGHT_PARENTHESIS reduce using rule 75 (boolean_expression -> TRUE .)
    RIGHT_BRACKET   reduce using rule 75 (boolean_expression -> TRUE .)
    COMMA           reduce using rule 75 (boolean_expression -> TRUE .)


state 76

    (69) unary_expression -> MINUS . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 104
    call_method_expression         shift and go to state 85

state 77

    (43) expression -> parenthesis_expression .

    LEFT_BRACKET    reduce using rule 43 (expression -> parenthesis_expression .)
    POINT           reduce using rule 43 (expression -> parenthesis_expression .)
    OR              reduce using rule 43 (expression -> parenthesis_expression .)
    AND             reduce using rule 43 (expression -> parenthesis_expression .)
    EQUAL           reduce using rule 43 (expression -> parenthesis_expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> parenthesis_expression .)
    GREATER         reduce using rule 43 (expression -> parenthesis_expression .)
    LESS            reduce using rule 43 (expression -> parenthesis_expression .)
    PLUS            reduce using rule 43 (expression -> parenthesis_expression .)
    MINUS           reduce using rule 43 (expression -> parenthesis_expression .)
    TIMES           reduce using rule 43 (expression -> parenthesis_expression .)
    DIVIDE          reduce using rule 43 (expression -> parenthesis_expression .)
    SEMICOLON       reduce using rule 43 (expression -> parenthesis_expression .)
    RIGHT_PARENTHESIS reduce using rule 43 (expression -> parenthesis_expression .)
    RIGHT_BRACKET   reduce using rule 43 (expression -> parenthesis_expression .)
    COMMA           reduce using rule 43 (expression -> parenthesis_expression .)


state 78

    (71) new_expression -> NEW . INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> NEW . IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS

    INT             shift and go to state 105
    IDENTIFIER      shift and go to state 106


state 79

    (39) expression -> array_element_expression .

    LEFT_BRACKET    reduce using rule 39 (expression -> array_element_expression .)
    POINT           reduce using rule 39 (expression -> array_element_expression .)
    OR              reduce using rule 39 (expression -> array_element_expression .)
    AND             reduce using rule 39 (expression -> array_element_expression .)
    EQUAL           reduce using rule 39 (expression -> array_element_expression .)
    NOT_EQUAL       reduce using rule 39 (expression -> array_element_expression .)
    GREATER         reduce using rule 39 (expression -> array_element_expression .)
    LESS            reduce using rule 39 (expression -> array_element_expression .)
    PLUS            reduce using rule 39 (expression -> array_element_expression .)
    MINUS           reduce using rule 39 (expression -> array_element_expression .)
    TIMES           reduce using rule 39 (expression -> array_element_expression .)
    DIVIDE          reduce using rule 39 (expression -> array_element_expression .)
    SEMICOLON       reduce using rule 39 (expression -> array_element_expression .)
    RIGHT_PARENTHESIS reduce using rule 39 (expression -> array_element_expression .)
    RIGHT_BRACKET   reduce using rule 39 (expression -> array_element_expression .)
    COMMA           reduce using rule 39 (expression -> array_element_expression .)


state 80

    (73) identifier_expression -> IDENTIFIER .

    RIGHT_PARENTHESIS reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    POINT           reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    OR              reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    AND             reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    GREATER         reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    LESS            reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    PLUS            reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    MINUS           reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    TIMES           reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 73 (identifier_expression -> IDENTIFIER .)
    COMMA           reduce using rule 73 (identifier_expression -> IDENTIFIER .)


state 81

    (68) parenthesis_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 107
    call_method_expression         shift and go to state 85

state 82

    (49) expression -> this_expression .

    LEFT_BRACKET    reduce using rule 49 (expression -> this_expression .)
    POINT           reduce using rule 49 (expression -> this_expression .)
    OR              reduce using rule 49 (expression -> this_expression .)
    AND             reduce using rule 49 (expression -> this_expression .)
    EQUAL           reduce using rule 49 (expression -> this_expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> this_expression .)
    GREATER         reduce using rule 49 (expression -> this_expression .)
    LESS            reduce using rule 49 (expression -> this_expression .)
    PLUS            reduce using rule 49 (expression -> this_expression .)
    MINUS           reduce using rule 49 (expression -> this_expression .)
    TIMES           reduce using rule 49 (expression -> this_expression .)
    DIVIDE          reduce using rule 49 (expression -> this_expression .)
    SEMICOLON       reduce using rule 49 (expression -> this_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (expression -> this_expression .)
    RIGHT_BRACKET   reduce using rule 49 (expression -> this_expression .)
    COMMA           reduce using rule 49 (expression -> this_expression .)


state 83

    (50) expression -> null_expression .

    LEFT_BRACKET    reduce using rule 50 (expression -> null_expression .)
    POINT           reduce using rule 50 (expression -> null_expression .)
    OR              reduce using rule 50 (expression -> null_expression .)
    AND             reduce using rule 50 (expression -> null_expression .)
    EQUAL           reduce using rule 50 (expression -> null_expression .)
    NOT_EQUAL       reduce using rule 50 (expression -> null_expression .)
    GREATER         reduce using rule 50 (expression -> null_expression .)
    LESS            reduce using rule 50 (expression -> null_expression .)
    PLUS            reduce using rule 50 (expression -> null_expression .)
    MINUS           reduce using rule 50 (expression -> null_expression .)
    TIMES           reduce using rule 50 (expression -> null_expression .)
    DIVIDE          reduce using rule 50 (expression -> null_expression .)
    SEMICOLON       reduce using rule 50 (expression -> null_expression .)
    RIGHT_PARENTHESIS reduce using rule 50 (expression -> null_expression .)
    RIGHT_BRACKET   reduce using rule 50 (expression -> null_expression .)
    COMMA           reduce using rule 50 (expression -> null_expression .)


state 84

    (40) expression -> field_expression .

    LEFT_BRACKET    reduce using rule 40 (expression -> field_expression .)
    POINT           reduce using rule 40 (expression -> field_expression .)
    OR              reduce using rule 40 (expression -> field_expression .)
    AND             reduce using rule 40 (expression -> field_expression .)
    EQUAL           reduce using rule 40 (expression -> field_expression .)
    NOT_EQUAL       reduce using rule 40 (expression -> field_expression .)
    GREATER         reduce using rule 40 (expression -> field_expression .)
    LESS            reduce using rule 40 (expression -> field_expression .)
    PLUS            reduce using rule 40 (expression -> field_expression .)
    MINUS           reduce using rule 40 (expression -> field_expression .)
    TIMES           reduce using rule 40 (expression -> field_expression .)
    DIVIDE          reduce using rule 40 (expression -> field_expression .)
    SEMICOLON       reduce using rule 40 (expression -> field_expression .)
    RIGHT_PARENTHESIS reduce using rule 40 (expression -> field_expression .)
    RIGHT_BRACKET   reduce using rule 40 (expression -> field_expression .)
    COMMA           reduce using rule 40 (expression -> field_expression .)


state 85

    (41) expression -> call_method_expression .

    LEFT_BRACKET    reduce using rule 41 (expression -> call_method_expression .)
    POINT           reduce using rule 41 (expression -> call_method_expression .)
    OR              reduce using rule 41 (expression -> call_method_expression .)
    AND             reduce using rule 41 (expression -> call_method_expression .)
    EQUAL           reduce using rule 41 (expression -> call_method_expression .)
    NOT_EQUAL       reduce using rule 41 (expression -> call_method_expression .)
    GREATER         reduce using rule 41 (expression -> call_method_expression .)
    LESS            reduce using rule 41 (expression -> call_method_expression .)
    PLUS            reduce using rule 41 (expression -> call_method_expression .)
    MINUS           reduce using rule 41 (expression -> call_method_expression .)
    TIMES           reduce using rule 41 (expression -> call_method_expression .)
    DIVIDE          reduce using rule 41 (expression -> call_method_expression .)
    SEMICOLON       reduce using rule 41 (expression -> call_method_expression .)
    RIGHT_PARENTHESIS reduce using rule 41 (expression -> call_method_expression .)
    RIGHT_BRACKET   reduce using rule 41 (expression -> call_method_expression .)
    COMMA           reduce using rule 41 (expression -> call_method_expression .)


state 86

    (76) boolean_expression -> FALSE .

    LEFT_BRACKET    reduce using rule 76 (boolean_expression -> FALSE .)
    POINT           reduce using rule 76 (boolean_expression -> FALSE .)
    OR              reduce using rule 76 (boolean_expression -> FALSE .)
    AND             reduce using rule 76 (boolean_expression -> FALSE .)
    EQUAL           reduce using rule 76 (boolean_expression -> FALSE .)
    NOT_EQUAL       reduce using rule 76 (boolean_expression -> FALSE .)
    GREATER         reduce using rule 76 (boolean_expression -> FALSE .)
    LESS            reduce using rule 76 (boolean_expression -> FALSE .)
    PLUS            reduce using rule 76 (boolean_expression -> FALSE .)
    MINUS           reduce using rule 76 (boolean_expression -> FALSE .)
    TIMES           reduce using rule 76 (boolean_expression -> FALSE .)
    DIVIDE          reduce using rule 76 (boolean_expression -> FALSE .)
    SEMICOLON       reduce using rule 76 (boolean_expression -> FALSE .)
    RIGHT_PARENTHESIS reduce using rule 76 (boolean_expression -> FALSE .)
    RIGHT_BRACKET   reduce using rule 76 (boolean_expression -> FALSE .)
    COMMA           reduce using rule 76 (boolean_expression -> FALSE .)


state 87

    (42) expression -> binary_expression .

    LEFT_BRACKET    reduce using rule 42 (expression -> binary_expression .)
    POINT           reduce using rule 42 (expression -> binary_expression .)
    OR              reduce using rule 42 (expression -> binary_expression .)
    AND             reduce using rule 42 (expression -> binary_expression .)
    EQUAL           reduce using rule 42 (expression -> binary_expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> binary_expression .)
    GREATER         reduce using rule 42 (expression -> binary_expression .)
    LESS            reduce using rule 42 (expression -> binary_expression .)
    PLUS            reduce using rule 42 (expression -> binary_expression .)
    MINUS           reduce using rule 42 (expression -> binary_expression .)
    TIMES           reduce using rule 42 (expression -> binary_expression .)
    DIVIDE          reduce using rule 42 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 42 (expression -> binary_expression .)
    RIGHT_PARENTHESIS reduce using rule 42 (expression -> binary_expression .)
    RIGHT_BRACKET   reduce using rule 42 (expression -> binary_expression .)
    COMMA           reduce using rule 42 (expression -> binary_expression .)


state 88

    (48) expression -> boolean_expression .

    LEFT_BRACKET    reduce using rule 48 (expression -> boolean_expression .)
    POINT           reduce using rule 48 (expression -> boolean_expression .)
    OR              reduce using rule 48 (expression -> boolean_expression .)
    AND             reduce using rule 48 (expression -> boolean_expression .)
    EQUAL           reduce using rule 48 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> boolean_expression .)
    GREATER         reduce using rule 48 (expression -> boolean_expression .)
    LESS            reduce using rule 48 (expression -> boolean_expression .)
    PLUS            reduce using rule 48 (expression -> boolean_expression .)
    MINUS           reduce using rule 48 (expression -> boolean_expression .)
    TIMES           reduce using rule 48 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 48 (expression -> boolean_expression .)
    SEMICOLON       reduce using rule 48 (expression -> boolean_expression .)
    RIGHT_PARENTHESIS reduce using rule 48 (expression -> boolean_expression .)
    RIGHT_BRACKET   reduce using rule 48 (expression -> boolean_expression .)
    COMMA           reduce using rule 48 (expression -> boolean_expression .)


state 89

    (77) this_expression -> THIS .

    LEFT_BRACKET    reduce using rule 77 (this_expression -> THIS .)
    POINT           reduce using rule 77 (this_expression -> THIS .)
    OR              reduce using rule 77 (this_expression -> THIS .)
    AND             reduce using rule 77 (this_expression -> THIS .)
    EQUAL           reduce using rule 77 (this_expression -> THIS .)
    NOT_EQUAL       reduce using rule 77 (this_expression -> THIS .)
    GREATER         reduce using rule 77 (this_expression -> THIS .)
    LESS            reduce using rule 77 (this_expression -> THIS .)
    PLUS            reduce using rule 77 (this_expression -> THIS .)
    MINUS           reduce using rule 77 (this_expression -> THIS .)
    TIMES           reduce using rule 77 (this_expression -> THIS .)
    DIVIDE          reduce using rule 77 (this_expression -> THIS .)
    SEMICOLON       reduce using rule 77 (this_expression -> THIS .)
    RIGHT_BRACKET   reduce using rule 77 (this_expression -> THIS .)
    RIGHT_PARENTHESIS reduce using rule 77 (this_expression -> THIS .)
    COMMA           reduce using rule 77 (this_expression -> THIS .)


state 90

    (70) unary_expression -> NOT . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 108
    call_method_expression         shift and go to state 85

state 91

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression . SEMICOLON RIGHT_BRACE
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 113
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 92

    (47) expression -> integer_literal_expression .

    LEFT_BRACKET    reduce using rule 47 (expression -> integer_literal_expression .)
    POINT           reduce using rule 47 (expression -> integer_literal_expression .)
    OR              reduce using rule 47 (expression -> integer_literal_expression .)
    AND             reduce using rule 47 (expression -> integer_literal_expression .)
    EQUAL           reduce using rule 47 (expression -> integer_literal_expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> integer_literal_expression .)
    GREATER         reduce using rule 47 (expression -> integer_literal_expression .)
    LESS            reduce using rule 47 (expression -> integer_literal_expression .)
    PLUS            reduce using rule 47 (expression -> integer_literal_expression .)
    MINUS           reduce using rule 47 (expression -> integer_literal_expression .)
    TIMES           reduce using rule 47 (expression -> integer_literal_expression .)
    DIVIDE          reduce using rule 47 (expression -> integer_literal_expression .)
    SEMICOLON       reduce using rule 47 (expression -> integer_literal_expression .)
    RIGHT_PARENTHESIS reduce using rule 47 (expression -> integer_literal_expression .)
    RIGHT_BRACKET   reduce using rule 47 (expression -> integer_literal_expression .)
    COMMA           reduce using rule 47 (expression -> integer_literal_expression .)


state 93

    (36) statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    binary_expression              shift and go to state 87
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    field_expression               shift and go to state 84
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    expression                     shift and go to state 122
    call_method_expression         shift and go to state 85

state 94

    (38) statement -> LEFT_BRACE statements_list . RIGHT_BRACE
    (24) statements_list -> statements_list . statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 123
    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 64

state 95

    (33) statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement else_statement
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    binary_expression              shift and go to state 87
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    expression                     shift and go to state 124
    call_method_expression         shift and go to state 85

state 96

    (31) identifier_or_assignment -> ASSIGNMENT . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 125
    call_method_expression         shift and go to state 85

state 97

    (32) identifier_or_assignment -> LEFT_BRACKET . expression RIGHT_BRACKET ASSIGNMENT expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 126
    call_method_expression         shift and go to state 85

state 98

    (30) identifier_or_assignment -> IDENTIFIER .

    SEMICOLON       reduce using rule 30 (identifier_or_assignment -> IDENTIFIER .)


state 99

    (27) statement -> IDENTIFIER identifier_or_assignment . SEMICOLON

    SEMICOLON       shift and go to state 127


state 100

    (25) statement -> INT identifier_or_brackets . SEMICOLON

    SEMICOLON       shift and go to state 128


state 101

    (37) statement -> SYSTEM POINT . OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    OUT             shift and go to state 129


state 102

    (26) statement -> BOOLEAN IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 130


state 103

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 6 (main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE statements_list RIGHT_BRACE .)


state 104

    (69) unary_expression -> MINUS expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 69 (unary_expression -> MINUS expression .)
    LEFT_BRACKET    reduce using rule 69 (unary_expression -> MINUS expression .)
    OR              reduce using rule 69 (unary_expression -> MINUS expression .)
    AND             reduce using rule 69 (unary_expression -> MINUS expression .)
    EQUAL           reduce using rule 69 (unary_expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 69 (unary_expression -> MINUS expression .)
    GREATER         reduce using rule 69 (unary_expression -> MINUS expression .)
    LESS            reduce using rule 69 (unary_expression -> MINUS expression .)
    PLUS            reduce using rule 69 (unary_expression -> MINUS expression .)
    MINUS           reduce using rule 69 (unary_expression -> MINUS expression .)
    TIMES           reduce using rule 69 (unary_expression -> MINUS expression .)
    DIVIDE          reduce using rule 69 (unary_expression -> MINUS expression .)
    SEMICOLON       reduce using rule 69 (unary_expression -> MINUS expression .)
    RIGHT_BRACKET   reduce using rule 69 (unary_expression -> MINUS expression .)
    COMMA           reduce using rule 69 (unary_expression -> MINUS expression .)
    POINT           shift and go to state 114

  ! POINT           [ reduce using rule 69 (unary_expression -> MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 116 ]


state 105

    (71) new_expression -> NEW INT . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 131


state 106

    (72) new_expression -> NEW IDENTIFIER . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 132


state 107

    (68) parenthesis_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 133
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 108

    (70) unary_expression -> NOT expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 70 (unary_expression -> NOT expression .)
    LEFT_BRACKET    reduce using rule 70 (unary_expression -> NOT expression .)
    OR              reduce using rule 70 (unary_expression -> NOT expression .)
    AND             reduce using rule 70 (unary_expression -> NOT expression .)
    EQUAL           reduce using rule 70 (unary_expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 70 (unary_expression -> NOT expression .)
    GREATER         reduce using rule 70 (unary_expression -> NOT expression .)
    LESS            reduce using rule 70 (unary_expression -> NOT expression .)
    PLUS            reduce using rule 70 (unary_expression -> NOT expression .)
    MINUS           reduce using rule 70 (unary_expression -> NOT expression .)
    TIMES           reduce using rule 70 (unary_expression -> NOT expression .)
    DIVIDE          reduce using rule 70 (unary_expression -> NOT expression .)
    SEMICOLON       reduce using rule 70 (unary_expression -> NOT expression .)
    RIGHT_BRACKET   reduce using rule 70 (unary_expression -> NOT expression .)
    COMMA           reduce using rule 70 (unary_expression -> NOT expression .)
    POINT           shift and go to state 114

  ! POINT           [ reduce using rule 70 (unary_expression -> NOT expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 116 ]


state 109

    (63) binary_expression -> expression LESS . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 134
    call_method_expression         shift and go to state 85

state 110

    (60) binary_expression -> expression EQUAL . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 135
    call_method_expression         shift and go to state 85

state 111

    (65) binary_expression -> expression MINUS . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 136
    call_method_expression         shift and go to state 85

state 112

    (61) binary_expression -> expression NOT_EQUAL . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 137
    call_method_expression         shift and go to state 85

state 113

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 138


state 114

    (52) field_expression -> expression POINT . IDENTIFIER
    (53) call_method_expression -> expression POINT . IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 139


state 115

    (64) binary_expression -> expression PLUS . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 140
    call_method_expression         shift and go to state 85

state 116

    (67) binary_expression -> expression DIVIDE . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 141
    call_method_expression         shift and go to state 85

state 117

    (66) binary_expression -> expression TIMES . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 142
    call_method_expression         shift and go to state 85

state 118

    (59) binary_expression -> expression AND . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 143
    call_method_expression         shift and go to state 85

state 119

    (62) binary_expression -> expression GREATER . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 144
    call_method_expression         shift and go to state 85

state 120

    (58) binary_expression -> expression OR . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 145
    call_method_expression         shift and go to state 85

state 121

    (51) array_element_expression -> expression LEFT_BRACKET . expression RIGHT_BRACKET
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 146
    call_method_expression         shift and go to state 85

state 122

    (36) statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 147
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 123

    (38) statement -> LEFT_BRACE statements_list RIGHT_BRACE .

    RETURN          reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    INT             reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    BOOLEAN         reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    IF              reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    WHILE           reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    SYSTEM          reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)
    ELSE            reduce using rule 38 (statement -> LEFT_BRACE statements_list RIGHT_BRACE .)


state 124

    (33) statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement else_statement
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 148
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 125

    (31) identifier_or_assignment -> ASSIGNMENT expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 31 (identifier_or_assignment -> ASSIGNMENT expression .)
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 126

    (32) identifier_or_assignment -> LEFT_BRACKET expression . RIGHT_BRACKET ASSIGNMENT expression
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 149
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 127

    (27) statement -> IDENTIFIER identifier_or_assignment SEMICOLON .

    RETURN          reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    INT             reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    BOOLEAN         reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    IF              reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    SYSTEM          reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    LEFT_BRACE      reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> IDENTIFIER identifier_or_assignment SEMICOLON .)


state 128

    (25) statement -> INT identifier_or_brackets SEMICOLON .

    RETURN          reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    INT             reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    BOOLEAN         reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    IF              reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    WHILE           reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    SYSTEM          reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    LEFT_BRACE      reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    RIGHT_BRACE     reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)
    ELSE            reduce using rule 25 (statement -> INT identifier_or_brackets SEMICOLON .)


state 129

    (37) statement -> SYSTEM POINT OUT . POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 150


state 130

    (26) statement -> BOOLEAN IDENTIFIER SEMICOLON .

    RETURN          reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    INT             reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    IF              reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    SYSTEM          reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 26 (statement -> BOOLEAN IDENTIFIER SEMICOLON .)


state 131

    (71) new_expression -> NEW INT LEFT_BRACKET . expression RIGHT_BRACKET
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 151
    call_method_expression         shift and go to state 85

state 132

    (72) new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 152


state 133

    (68) parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    POINT           reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 68 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 134

    (63) binary_expression -> expression LESS expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 63 (binary_expression -> expression LESS expression .)
    OR              reduce using rule 63 (binary_expression -> expression LESS expression .)
    AND             reduce using rule 63 (binary_expression -> expression LESS expression .)
    EQUAL           reduce using rule 63 (binary_expression -> expression LESS expression .)
    NOT_EQUAL       reduce using rule 63 (binary_expression -> expression LESS expression .)
    GREATER         reduce using rule 63 (binary_expression -> expression LESS expression .)
    LESS            reduce using rule 63 (binary_expression -> expression LESS expression .)
    RIGHT_PARENTHESIS reduce using rule 63 (binary_expression -> expression LESS expression .)
    COMMA           reduce using rule 63 (binary_expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 63 (binary_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 63 (binary_expression -> expression LESS expression .)
    POINT           shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 63 (binary_expression -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 63 (binary_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 63 (binary_expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 63 (binary_expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 63 (binary_expression -> expression LESS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]


state 135

    (60) binary_expression -> expression EQUAL expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    OR              reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    AND             reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    GREATER         reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    LESS            reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 60 (binary_expression -> expression EQUAL expression .)
    POINT           shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 60 (binary_expression -> expression EQUAL expression .) ]
  ! PLUS            [ reduce using rule 60 (binary_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 60 (binary_expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 60 (binary_expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 60 (binary_expression -> expression EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]


state 136

    (65) binary_expression -> expression MINUS expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 65 (binary_expression -> expression MINUS expression .)
    OR              reduce using rule 65 (binary_expression -> expression MINUS expression .)
    AND             reduce using rule 65 (binary_expression -> expression MINUS expression .)
    EQUAL           reduce using rule 65 (binary_expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 65 (binary_expression -> expression MINUS expression .)
    GREATER         reduce using rule 65 (binary_expression -> expression MINUS expression .)
    LESS            reduce using rule 65 (binary_expression -> expression MINUS expression .)
    PLUS            reduce using rule 65 (binary_expression -> expression MINUS expression .)
    MINUS           reduce using rule 65 (binary_expression -> expression MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 65 (binary_expression -> expression MINUS expression .)
    COMMA           reduce using rule 65 (binary_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 65 (binary_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 65 (binary_expression -> expression MINUS expression .)
    POINT           shift and go to state 114
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 65 (binary_expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 65 (binary_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> expression MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]


state 137

    (61) binary_expression -> expression NOT_EQUAL expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    GREATER         reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    LESS            reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .)
    POINT           shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 61 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]


state 138

    (17) method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 17 (method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .)
    PUBLIC          reduce using rule 17 (method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .)
    INT             reduce using rule 17 (method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .)
    BOOLEAN         reduce using rule 17 (method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 17 (method -> PUBLIC single_or_array_var LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE statements_list RETURN expression SEMICOLON RIGHT_BRACE .)


state 139

    (52) field_expression -> expression POINT IDENTIFIER .
    (53) call_method_expression -> expression POINT IDENTIFIER . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    LEFT_BRACKET    reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    POINT           reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    OR              reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    AND             reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    EQUAL           reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    NOT_EQUAL       reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    GREATER         reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    LESS            reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    PLUS            reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    MINUS           reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    TIMES           reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    DIVIDE          reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    COMMA           reduce using rule 52 (field_expression -> expression POINT IDENTIFIER .)
    LEFT_PARENTHESIS shift and go to state 153


state 140

    (64) binary_expression -> expression PLUS expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 64 (binary_expression -> expression PLUS expression .)
    OR              reduce using rule 64 (binary_expression -> expression PLUS expression .)
    AND             reduce using rule 64 (binary_expression -> expression PLUS expression .)
    EQUAL           reduce using rule 64 (binary_expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 64 (binary_expression -> expression PLUS expression .)
    GREATER         reduce using rule 64 (binary_expression -> expression PLUS expression .)
    LESS            reduce using rule 64 (binary_expression -> expression PLUS expression .)
    PLUS            reduce using rule 64 (binary_expression -> expression PLUS expression .)
    MINUS           reduce using rule 64 (binary_expression -> expression PLUS expression .)
    RIGHT_PARENTHESIS reduce using rule 64 (binary_expression -> expression PLUS expression .)
    COMMA           reduce using rule 64 (binary_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 64 (binary_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 64 (binary_expression -> expression PLUS expression .)
    POINT           shift and go to state 114
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 64 (binary_expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 64 (binary_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (binary_expression -> expression PLUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]


state 141

    (67) binary_expression -> expression DIVIDE expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    OR              reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    AND             reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    LESS            reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    RIGHT_BRACKET   reduce using rule 67 (binary_expression -> expression DIVIDE expression .)
    POINT           shift and go to state 114

  ! POINT           [ reduce using rule 67 (binary_expression -> expression DIVIDE expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 116 ]


state 142

    (66) binary_expression -> expression TIMES expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 66 (binary_expression -> expression TIMES expression .)
    OR              reduce using rule 66 (binary_expression -> expression TIMES expression .)
    AND             reduce using rule 66 (binary_expression -> expression TIMES expression .)
    EQUAL           reduce using rule 66 (binary_expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 66 (binary_expression -> expression TIMES expression .)
    GREATER         reduce using rule 66 (binary_expression -> expression TIMES expression .)
    LESS            reduce using rule 66 (binary_expression -> expression TIMES expression .)
    PLUS            reduce using rule 66 (binary_expression -> expression TIMES expression .)
    MINUS           reduce using rule 66 (binary_expression -> expression TIMES expression .)
    TIMES           reduce using rule 66 (binary_expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 66 (binary_expression -> expression TIMES expression .)
    RIGHT_PARENTHESIS reduce using rule 66 (binary_expression -> expression TIMES expression .)
    COMMA           reduce using rule 66 (binary_expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 66 (binary_expression -> expression TIMES expression .)
    RIGHT_BRACKET   reduce using rule 66 (binary_expression -> expression TIMES expression .)
    POINT           shift and go to state 114

  ! POINT           [ reduce using rule 66 (binary_expression -> expression TIMES expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 111 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 116 ]


state 143

    (59) binary_expression -> expression AND expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 59 (binary_expression -> expression AND expression .)
    OR              reduce using rule 59 (binary_expression -> expression AND expression .)
    AND             reduce using rule 59 (binary_expression -> expression AND expression .)
    RIGHT_PARENTHESIS reduce using rule 59 (binary_expression -> expression AND expression .)
    COMMA           reduce using rule 59 (binary_expression -> expression AND expression .)
    SEMICOLON       reduce using rule 59 (binary_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 59 (binary_expression -> expression AND expression .)
    POINT           shift and go to state 114
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 59 (binary_expression -> expression AND expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]


state 144

    (62) binary_expression -> expression GREATER expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 62 (binary_expression -> expression GREATER expression .)
    OR              reduce using rule 62 (binary_expression -> expression GREATER expression .)
    AND             reduce using rule 62 (binary_expression -> expression GREATER expression .)
    EQUAL           reduce using rule 62 (binary_expression -> expression GREATER expression .)
    NOT_EQUAL       reduce using rule 62 (binary_expression -> expression GREATER expression .)
    GREATER         reduce using rule 62 (binary_expression -> expression GREATER expression .)
    LESS            reduce using rule 62 (binary_expression -> expression GREATER expression .)
    RIGHT_PARENTHESIS reduce using rule 62 (binary_expression -> expression GREATER expression .)
    COMMA           reduce using rule 62 (binary_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 62 (binary_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 62 (binary_expression -> expression GREATER expression .)
    POINT           shift and go to state 114
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 62 (binary_expression -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 62 (binary_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 62 (binary_expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 62 (binary_expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 62 (binary_expression -> expression GREATER expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 110 ]
  ! NOT_EQUAL       [ shift and go to state 112 ]
  ! GREATER         [ shift and go to state 119 ]
  ! LESS            [ shift and go to state 109 ]


state 145

    (58) binary_expression -> expression OR expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 58 (binary_expression -> expression OR expression .)
    OR              reduce using rule 58 (binary_expression -> expression OR expression .)
    AND             reduce using rule 58 (binary_expression -> expression OR expression .)
    RIGHT_PARENTHESIS reduce using rule 58 (binary_expression -> expression OR expression .)
    COMMA           reduce using rule 58 (binary_expression -> expression OR expression .)
    SEMICOLON       reduce using rule 58 (binary_expression -> expression OR expression .)
    RIGHT_BRACKET   reduce using rule 58 (binary_expression -> expression OR expression .)
    POINT           shift and go to state 114
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116

  ! POINT           [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 58 (binary_expression -> expression OR expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 121 ]
  ! OR              [ shift and go to state 120 ]
  ! AND             [ shift and go to state 118 ]


state 146

    (51) array_element_expression -> expression LEFT_BRACKET expression . RIGHT_BRACKET
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 154
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 147

    (36) statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 155

state 148

    (33) statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement else_statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 156

state 149

    (32) identifier_or_assignment -> LEFT_BRACKET expression RIGHT_BRACKET . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 157


state 150

    (37) statement -> SYSTEM POINT OUT POINT . PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    PRINTLN         shift and go to state 158


state 151

    (71) new_expression -> NEW INT LEFT_BRACKET expression . RIGHT_BRACKET
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 159
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 152

    (72) new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    POINT           reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS            reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 72 (new_expression -> NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 153

    (53) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS . expression_list RIGHT_PARENTHESIS
    (54) expression_list -> . empty
    (55) expression_list -> . nonempty_expression_list
    (2) empty -> .
    (56) nonempty_expression_list -> . expression
    (57) nonempty_expression_list -> . expression_list COMMA expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    RIGHT_PARENTHESIS reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    expression                     shift and go to state 161
    expression_list                shift and go to state 162
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    nonempty_expression_list       shift and go to state 163
    empty                          shift and go to state 160
    call_method_expression         shift and go to state 85

state 154

    (51) array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 51 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)


state 155

    (36) statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    RETURN          reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INT             reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BOOLEAN         reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SYSTEM          reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_BRACE      reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_BRACE     reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 36 (statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 156

    (33) statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . else_statement
    (34) else_statement -> . empty
    (35) else_statement -> . ELSE statement
    (2) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 164
    RETURN          reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    RIGHT_BRACE     reduce using rule 2 (empty -> .)

  ! ELSE            [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 165
    else_statement                 shift and go to state 166

state 157

    (32) identifier_or_assignment -> LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 167
    call_method_expression         shift and go to state 85

state 158

    (37) statement -> SYSTEM POINT OUT POINT PRINTLN . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 168


state 159

    (71) new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 71 (new_expression -> NEW INT LEFT_BRACKET expression RIGHT_BRACKET .)


state 160

    (54) expression_list -> empty .

    RIGHT_PARENTHESIS reduce using rule 54 (expression_list -> empty .)
    COMMA           reduce using rule 54 (expression_list -> empty .)


state 161

    (56) nonempty_expression_list -> expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 56 (nonempty_expression_list -> expression .)
    COMMA           reduce using rule 56 (nonempty_expression_list -> expression .)
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 162

    (53) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list . RIGHT_PARENTHESIS
    (57) nonempty_expression_list -> expression_list . COMMA expression

    RIGHT_PARENTHESIS shift and go to state 170
    COMMA           shift and go to state 169


state 163

    (55) expression_list -> nonempty_expression_list .

    RIGHT_PARENTHESIS reduce using rule 55 (expression_list -> nonempty_expression_list .)
    COMMA           reduce using rule 55 (expression_list -> nonempty_expression_list .)


state 164

    (35) else_statement -> ELSE . statement
    (25) statement -> . INT identifier_or_brackets SEMICOLON
    (26) statement -> . BOOLEAN IDENTIFIER SEMICOLON
    (27) statement -> . IDENTIFIER identifier_or_assignment SEMICOLON
    (33) statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement
    (36) statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (38) statement -> . LEFT_BRACE statements_list RIGHT_BRACE

    INT             shift and go to state 66
    BOOLEAN         shift and go to state 68
    IDENTIFIER      shift and go to state 65
    IF              shift and go to state 63
    WHILE           shift and go to state 61
    SYSTEM          shift and go to state 67
    LEFT_BRACE      shift and go to state 62

    statement                      shift and go to state 171

state 165

    (34) else_statement -> empty .

    RETURN          reduce using rule 34 (else_statement -> empty .)
    INT             reduce using rule 34 (else_statement -> empty .)
    BOOLEAN         reduce using rule 34 (else_statement -> empty .)
    IDENTIFIER      reduce using rule 34 (else_statement -> empty .)
    IF              reduce using rule 34 (else_statement -> empty .)
    WHILE           reduce using rule 34 (else_statement -> empty .)
    SYSTEM          reduce using rule 34 (else_statement -> empty .)
    LEFT_BRACE      reduce using rule 34 (else_statement -> empty .)
    RIGHT_BRACE     reduce using rule 34 (else_statement -> empty .)
    ELSE            reduce using rule 34 (else_statement -> empty .)


state 166

    (33) statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .

    RETURN          reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    INT             reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    BOOLEAN         reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    IDENTIFIER      reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    IF              reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    WHILE           reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    SYSTEM          reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    LEFT_BRACE      reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    RIGHT_BRACE     reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)
    ELSE            reduce using rule 33 (statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_statement .)


state 167

    (32) identifier_or_assignment -> LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 32 (identifier_or_assignment -> LEFT_BRACKET expression RIGHT_BRACKET ASSIGNMENT expression .)
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 168

    (37) statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 172
    call_method_expression         shift and go to state 85

state 169

    (57) nonempty_expression_list -> expression_list COMMA . expression
    (39) expression -> . array_element_expression
    (40) expression -> . field_expression
    (41) expression -> . call_method_expression
    (42) expression -> . binary_expression
    (43) expression -> . parenthesis_expression
    (44) expression -> . unary_expression
    (45) expression -> . new_expression
    (46) expression -> . identifier_expression
    (47) expression -> . integer_literal_expression
    (48) expression -> . boolean_expression
    (49) expression -> . this_expression
    (50) expression -> . null_expression
    (51) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> . expression POINT IDENTIFIER
    (53) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> . expression OR expression
    (59) binary_expression -> . expression AND expression
    (60) binary_expression -> . expression EQUAL expression
    (61) binary_expression -> . expression NOT_EQUAL expression
    (62) binary_expression -> . expression GREATER expression
    (63) binary_expression -> . expression LESS expression
    (64) binary_expression -> . expression PLUS expression
    (65) binary_expression -> . expression MINUS expression
    (66) binary_expression -> . expression TIMES expression
    (67) binary_expression -> . expression DIVIDE expression
    (68) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (69) unary_expression -> . MINUS expression
    (70) unary_expression -> . NOT expression
    (71) new_expression -> . NEW INT LEFT_BRACKET expression RIGHT_BRACKET
    (72) new_expression -> . NEW IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (73) identifier_expression -> . IDENTIFIER
    (74) integer_literal_expression -> . INTEGER_LITERAL
    (75) boolean_expression -> . TRUE
    (76) boolean_expression -> . FALSE
    (77) this_expression -> . THIS
    (78) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 81
    MINUS           shift and go to state 76
    NOT             shift and go to state 90
    NEW             shift and go to state 78
    IDENTIFIER      shift and go to state 80
    INTEGER_LITERAL shift and go to state 72
    TRUE            shift and go to state 75
    FALSE           shift and go to state 86
    THIS            shift and go to state 89
    NULL            shift and go to state 74

    this_expression                shift and go to state 82
    null_expression                shift and go to state 83
    field_expression               shift and go to state 84
    unary_expression               shift and go to state 70
    identifier_expression          shift and go to state 71
    parenthesis_expression         shift and go to state 77
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 88
    integer_literal_expression     shift and go to state 92
    new_expression                 shift and go to state 73
    binary_expression              shift and go to state 87
    expression                     shift and go to state 173
    call_method_expression         shift and go to state 85

state 170

    (53) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    POINT           reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 53 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)


state 171

    (35) else_statement -> ELSE statement .

    RETURN          reduce using rule 35 (else_statement -> ELSE statement .)
    INT             reduce using rule 35 (else_statement -> ELSE statement .)
    BOOLEAN         reduce using rule 35 (else_statement -> ELSE statement .)
    IDENTIFIER      reduce using rule 35 (else_statement -> ELSE statement .)
    IF              reduce using rule 35 (else_statement -> ELSE statement .)
    WHILE           reduce using rule 35 (else_statement -> ELSE statement .)
    SYSTEM          reduce using rule 35 (else_statement -> ELSE statement .)
    LEFT_BRACE      reduce using rule 35 (else_statement -> ELSE statement .)
    RIGHT_BRACE     reduce using rule 35 (else_statement -> ELSE statement .)
    ELSE            reduce using rule 35 (else_statement -> ELSE statement .)


state 172

    (37) statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 174
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 173

    (57) nonempty_expression_list -> expression_list COMMA expression .
    (51) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (52) field_expression -> expression . POINT IDENTIFIER
    (53) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (58) binary_expression -> expression . OR expression
    (59) binary_expression -> expression . AND expression
    (60) binary_expression -> expression . EQUAL expression
    (61) binary_expression -> expression . NOT_EQUAL expression
    (62) binary_expression -> expression . GREATER expression
    (63) binary_expression -> expression . LESS expression
    (64) binary_expression -> expression . PLUS expression
    (65) binary_expression -> expression . MINUS expression
    (66) binary_expression -> expression . TIMES expression
    (67) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 57 (nonempty_expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 57 (nonempty_expression_list -> expression_list COMMA expression .)
    LEFT_BRACKET    shift and go to state 121
    POINT           shift and go to state 114
    OR              shift and go to state 120
    AND             shift and go to state 118
    EQUAL           shift and go to state 110
    NOT_EQUAL       shift and go to state 112
    GREATER         shift and go to state 119
    LESS            shift and go to state 109
    PLUS            shift and go to state 115
    MINUS           shift and go to state 111
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 116


state 174

    (37) statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 175


state 175

    (37) statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    RETURN          reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INT             reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    BOOLEAN         reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SYSTEM          reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_BRACE      reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_BRACE     reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 37 (statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 156 resolved as shift
