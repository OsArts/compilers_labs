Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programm
Rule 1     programm -> main_class class_list
Rule 2     empty -> <empty>
Rule 3     class_list -> empty
Rule 4     class_list -> class_list class
Rule 5     main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE
Rule 6     main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE
Rule 7     class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE
Rule 8     extends -> empty
Rule 9     extends -> EXTENDS IDENTIFIER
Rule 10    declaration_list -> empty
Rule 11    declaration_list -> declaration_list field
Rule 12    declaration_list -> declaration_list method
Rule 13    field -> type IDENTIFIER SEMICOLON
Rule 14    method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
Rule 15    params_list -> empty
Rule 16    params_list -> args_list
Rule 17    args_list -> arg
Rule 18    args_list -> args_list COMMA arg
Rule 19    arg -> type IDENTIFIER
Rule 20    statement_list -> empty
Rule 21    statement_list -> statement_list statement
Rule 22    var_list -> empty
Rule 23    var_list -> var_list var
Rule 24    var -> type IDENTIFIER SEMICOLON
Rule 25    var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON
Rule 26    type -> BOOLEAN
Rule 27    type -> INT
Rule 28    type -> IDENTIFIER
Rule 29    type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET
Rule 30    type -> INT LEFT_BRACKET RIGHT_BRACKET
Rule 31    type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
Rule 32    statement -> if_statement
Rule 33    statement -> while_statement
Rule 34    statement -> print_statement
Rule 35    statement -> assignment_statement
Rule 36    if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 37    if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
Rule 38    while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 39    print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 40    assignment_statement -> expression ASSIGNMENT expression SEMICOLON
Rule 41    statement -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 42    expression -> array_element_expression
Rule 43    expression -> field_expression
Rule 44    expression -> call_method_expression
Rule 45    expression -> binary_expression
Rule 46    expression -> parenthesis_expression
Rule 47    expression -> unary_expression
Rule 48    expression -> new_expression
Rule 49    expression -> new_array_expression
Rule 50    expression -> identifier_expression
Rule 51    expression -> integer_literal_expression
Rule 52    expression -> boolean_expression
Rule 53    expression -> this_expression
Rule 54    expression -> null_expression
Rule 55    array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET
Rule 56    field_expression -> expression POINT IDENTIFIER
Rule 57    call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
Rule 58    expression_list -> empty
Rule 59    expression_list -> nonempty_expression_list
Rule 60    nonempty_expression_list -> expression
Rule 61    nonempty_expression_list -> expression_list COMMA expression
Rule 62    binary_expression -> expression OR expression
Rule 63    binary_expression -> expression AND expression
Rule 64    binary_expression -> expression EQUAL expression
Rule 65    binary_expression -> expression NOT_EQUAL expression
Rule 66    binary_expression -> expression GREATER expression
Rule 67    binary_expression -> expression LESS expression
Rule 68    binary_expression -> expression PLUS expression
Rule 69    binary_expression -> expression MINUS expression
Rule 70    binary_expression -> expression TIMES expression
Rule 71    binary_expression -> expression DIVIDE expression
Rule 72    parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 73    unary_expression -> MINUS expression
Rule 74    unary_expression -> NOT expression
Rule 75    new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 76    new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET
Rule 77    identifier_expression -> IDENTIFIER
Rule 78    integer_literal_expression -> INTEGER_LITERAL
Rule 79    boolean_expression -> TRUE
Rule 80    boolean_expression -> FALSE
Rule 81    this_expression -> THIS
Rule 82    null_expression -> NULL

Terminals, with rules where they appear

AND                  : 63
ASSIGNMENT           : 25 40
BOOLEAN              : 26 29
CLASS                : 5 7
COMMA                : 18 61
DIVIDE               : 71
ELSE                 : 37
EQUAL                : 64
EXTENDS              : 9
FALSE                : 80
GREATER              : 66
IDENTIFIER           : 5 6 7 9 13 14 19 24 25 28 31 56 57 77
IF                   : 36 37
INT                  : 27 30
INTEGER_LITERAL      : 78
LEFT_BRACE           : 5 6 7 14 41
LEFT_BRACKET         : 6 29 30 31 55 76
LEFT_PARENTHESIS     : 6 14 36 37 38 39 57 72 75
LESS                 : 67
MAIN                 : 6
MINUS                : 69 73
NEW                  : 75 76
NOT                  : 74
NOT_EQUAL            : 65
NULL                 : 82
OR                   : 62
OUT                  : 39
PLUS                 : 68
POINT                : 39 39 56 57
PRINTLN              : 39
PUBLIC               : 6 14
RETURN               : 14
RIGHT_BRACE          : 5 6 7 14 41
RIGHT_BRACKET        : 6 29 30 31 55 76
RIGHT_PARENTHESIS    : 6 14 36 37 38 39 57 72 75
SEMICOLON            : 13 14 24 25 39 40
STATIC               : 6
STRING               : 6
SYSTEM               : 39
THIS                 : 81
TIMES                : 70
TRUE                 : 79
VOID                 : 6
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

arg                  : 17 18
args_list            : 16 18
array_element_expression : 42
assignment_statement : 35
binary_expression    : 45
boolean_expression   : 52
call_method_expression : 44
class                : 4
class_list           : 1 4
declaration_list     : 7 11 12
empty                : 3 8 10 15 20 22 58
expression           : 14 25 36 37 38 39 40 40 55 55 56 57 60 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 73 74 76
expression_list      : 57 61
extends              : 7
field                : 11
field_expression     : 43
identifier_expression : 50
if_statement         : 32
integer_literal_expression : 51
main_class           : 1
main_method          : 5
method               : 12
new_array_expression : 49
new_expression       : 48
nonempty_expression_list : 59
null_expression      : 54
params_list          : 14
parenthesis_expression : 46
print_statement      : 34
programm             : 0
statement            : 21 36 37 37 38
statement_list       : 6 14 21 41
this_expression      : 53
type                 : 13 14 19 24 25 75 76
unary_expression     : 47
var                  : 23
var_list             : 6 14 23
while_statement      : 33

Parsing method: LALR

state 0

    (0) S' -> . programm
    (1) programm -> . main_class class_list
    (5) main_class -> . CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    CLASS           shift and go to state 3

    main_class                     shift and go to state 1
    programm                       shift and go to state 2

state 1

    (1) programm -> main_class . class_list
    (3) class_list -> . empty
    (4) class_list -> . class_list class
    (2) empty -> .

    CLASS           reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    class_list                     shift and go to state 4
    empty                          shift and go to state 5

state 2

    (0) S' -> programm .



state 3

    (5) main_class -> CLASS . IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    IDENTIFIER      shift and go to state 6


state 4

    (1) programm -> main_class class_list .
    (4) class_list -> class_list . class
    (7) class -> . CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    $end            reduce using rule 1 (programm -> main_class class_list .)
    CLASS           shift and go to state 7

    class                          shift and go to state 8

state 5

    (3) class_list -> empty .

    CLASS           reduce using rule 3 (class_list -> empty .)
    $end            reduce using rule 3 (class_list -> empty .)


state 6

    (5) main_class -> CLASS IDENTIFIER . LEFT_BRACE main_method RIGHT_BRACE

    LEFT_BRACE      shift and go to state 9


state 7

    (7) class -> CLASS . IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 10


state 8

    (4) class_list -> class_list class .

    CLASS           reduce using rule 4 (class_list -> class_list class .)
    $end            reduce using rule 4 (class_list -> class_list class .)


state 9

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE . main_method RIGHT_BRACE
    (6) main_method -> . PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    PUBLIC          shift and go to state 12

    main_method                    shift and go to state 11

state 10

    (7) class -> CLASS IDENTIFIER . extends LEFT_BRACE declaration_list RIGHT_BRACE
    (8) extends -> . empty
    (9) extends -> . EXTENDS IDENTIFIER
    (2) empty -> .

    EXTENDS         shift and go to state 14
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    extends                        shift and go to state 13
    empty                          shift and go to state 15

state 11

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 16


state 12

    (6) main_method -> PUBLIC . STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    STATIC          shift and go to state 17


state 13

    (7) class -> CLASS IDENTIFIER extends . LEFT_BRACE declaration_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 18


state 14

    (9) extends -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 19


state 15

    (8) extends -> empty .

    LEFT_BRACE      reduce using rule 8 (extends -> empty .)


state 16

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .

    CLASS           reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)
    $end            reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)


state 17

    (6) main_method -> PUBLIC STATIC . VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    VOID            shift and go to state 20


state 18

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE . declaration_list RIGHT_BRACE
    (10) declaration_list -> . empty
    (11) declaration_list -> . declaration_list field
    (12) declaration_list -> . declaration_list method
    (2) empty -> .

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    PUBLIC          reduce using rule 2 (empty -> .)
    BOOLEAN         reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)

    empty                          shift and go to state 22
    declaration_list               shift and go to state 21

state 19

    (9) extends -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 9 (extends -> EXTENDS IDENTIFIER .)


state 20

    (6) main_method -> PUBLIC STATIC VOID . MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    MAIN            shift and go to state 23


state 21

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list . RIGHT_BRACE
    (11) declaration_list -> declaration_list . field
    (12) declaration_list -> declaration_list . method
    (13) field -> . type IDENTIFIER SEMICOLON
    (14) method -> . PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_BRACE     shift and go to state 24
    PUBLIC          shift and go to state 31
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

    field                          shift and go to state 25
    type                           shift and go to state 27
    method                         shift and go to state 28

state 22

    (10) declaration_list -> empty .

    RIGHT_BRACE     reduce using rule 10 (declaration_list -> empty .)
    PUBLIC          reduce using rule 10 (declaration_list -> empty .)
    BOOLEAN         reduce using rule 10 (declaration_list -> empty .)
    INT             reduce using rule 10 (declaration_list -> empty .)
    IDENTIFIER      reduce using rule 10 (declaration_list -> empty .)


state 23

    (6) main_method -> PUBLIC STATIC VOID MAIN . LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 32


state 24

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .

    CLASS           reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)
    $end            reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)


state 25

    (11) declaration_list -> declaration_list field .

    RIGHT_BRACE     reduce using rule 11 (declaration_list -> declaration_list field .)
    PUBLIC          reduce using rule 11 (declaration_list -> declaration_list field .)
    BOOLEAN         reduce using rule 11 (declaration_list -> declaration_list field .)
    INT             reduce using rule 11 (declaration_list -> declaration_list field .)
    IDENTIFIER      reduce using rule 11 (declaration_list -> declaration_list field .)


state 26

    (28) type -> IDENTIFIER .
    (31) type -> IDENTIFIER . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 28 (type -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 28 (type -> IDENTIFIER .)
    LEFT_BRACKET    shift and go to state 33

  ! LEFT_BRACKET    [ reduce using rule 28 (type -> IDENTIFIER .) ]


state 27

    (13) field -> type . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 34


state 28

    (12) declaration_list -> declaration_list method .

    RIGHT_BRACE     reduce using rule 12 (declaration_list -> declaration_list method .)
    PUBLIC          reduce using rule 12 (declaration_list -> declaration_list method .)
    BOOLEAN         reduce using rule 12 (declaration_list -> declaration_list method .)
    INT             reduce using rule 12 (declaration_list -> declaration_list method .)
    IDENTIFIER      reduce using rule 12 (declaration_list -> declaration_list method .)


state 29

    (27) type -> INT .
    (30) type -> INT . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 27 (type -> INT .)
    LEFT_PARENTHESIS reduce using rule 27 (type -> INT .)
    LEFT_BRACKET    shift and go to state 35

  ! LEFT_BRACKET    [ reduce using rule 27 (type -> INT .) ]


state 30

    (26) type -> BOOLEAN .
    (29) type -> BOOLEAN . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 26 (type -> BOOLEAN .)
    LEFT_PARENTHESIS reduce using rule 26 (type -> BOOLEAN .)
    LEFT_BRACKET    shift and go to state 36

  ! LEFT_BRACKET    [ reduce using rule 26 (type -> BOOLEAN .) ]


state 31

    (14) method -> PUBLIC . type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

    type                           shift and go to state 37

state 32

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS . STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    STRING          shift and go to state 38


state 33

    (31) type -> IDENTIFIER LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 39


state 34

    (13) field -> type IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 40


state 35

    (30) type -> INT LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 41


state 36

    (29) type -> BOOLEAN LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 42


state 37

    (14) method -> PUBLIC type . IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    IDENTIFIER      shift and go to state 43


state 38

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING . LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_BRACKET    shift and go to state 44


state 39

    (31) type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)


state 40

    (13) field -> type IDENTIFIER SEMICOLON .

    RIGHT_BRACE     reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)


state 41

    (30) type -> INT LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)


state 42

    (29) type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)


state 43

    (14) method -> PUBLIC type IDENTIFIER . LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 45


state 44

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET . RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    RIGHT_BRACKET   shift and go to state 46


state 45

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS . params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (15) params_list -> . empty
    (16) params_list -> . args_list
    (2) empty -> .
    (17) args_list -> . arg
    (18) args_list -> . args_list COMMA arg
    (19) arg -> . type IDENTIFIER
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_PARENTHESIS reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

    type                           shift and go to state 50
    args_list                      shift and go to state 48
    arg                            shift and go to state 49
    params_list                    shift and go to state 51
    empty                          shift and go to state 47

state 46

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET . IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 52


state 47

    (15) params_list -> empty .

    RIGHT_PARENTHESIS reduce using rule 15 (params_list -> empty .)


state 48

    (16) params_list -> args_list .
    (18) args_list -> args_list . COMMA arg

    RIGHT_PARENTHESIS reduce using rule 16 (params_list -> args_list .)
    COMMA           shift and go to state 53


state 49

    (17) args_list -> arg .

    COMMA           reduce using rule 17 (args_list -> arg .)
    RIGHT_PARENTHESIS reduce using rule 17 (args_list -> arg .)


state 50

    (19) arg -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 51

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list . RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 55


state 52

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER . RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 56


state 53

    (18) args_list -> args_list COMMA . arg
    (19) arg -> . type IDENTIFIER
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

    arg                            shift and go to state 57
    type                           shift and go to state 50

state 54

    (19) arg -> type IDENTIFIER .

    COMMA           reduce using rule 19 (arg -> type IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 19 (arg -> type IDENTIFIER .)


state 55

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS . LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_BRACE      shift and go to state 58


state 56

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS . LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 59


state 57

    (18) args_list -> args_list COMMA arg .

    COMMA           reduce using rule 18 (args_list -> args_list COMMA arg .)
    RIGHT_PARENTHESIS reduce using rule 18 (args_list -> args_list COMMA arg .)


state 58

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE . var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (22) var_list -> . empty
    (23) var_list -> . var_list var
    (2) empty -> .

    BOOLEAN         reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)

    var_list                       shift and go to state 60
    empty                          shift and go to state 61

state 59

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE . var_list statement_list RIGHT_BRACE
    (22) var_list -> . empty
    (23) var_list -> . var_list var
    (2) empty -> .

    BOOLEAN         reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)

    var_list                       shift and go to state 62
    empty                          shift and go to state 61

state 60

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list . statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (23) var_list -> var_list . var
    (20) statement_list -> . empty
    (21) statement_list -> . statement_list statement
    (24) var -> . type IDENTIFIER SEMICOLON
    (25) var -> . type IDENTIFIER ASSIGNMENT expression SEMICOLON
    (2) empty -> .
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RETURN          reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]

    type                           shift and go to state 66
    var                            shift and go to state 63
    statement_list                 shift and go to state 65
    empty                          shift and go to state 64

state 61

    (22) var_list -> empty .

    BOOLEAN         reduce using rule 22 (var_list -> empty .)
    INT             reduce using rule 22 (var_list -> empty .)
    IDENTIFIER      reduce using rule 22 (var_list -> empty .)
    RETURN          reduce using rule 22 (var_list -> empty .)
    LEFT_BRACE      reduce using rule 22 (var_list -> empty .)
    IF              reduce using rule 22 (var_list -> empty .)
    WHILE           reduce using rule 22 (var_list -> empty .)
    SYSTEM          reduce using rule 22 (var_list -> empty .)
    LEFT_PARENTHESIS reduce using rule 22 (var_list -> empty .)
    MINUS           reduce using rule 22 (var_list -> empty .)
    NOT             reduce using rule 22 (var_list -> empty .)
    NEW             reduce using rule 22 (var_list -> empty .)
    INTEGER_LITERAL reduce using rule 22 (var_list -> empty .)
    TRUE            reduce using rule 22 (var_list -> empty .)
    FALSE           reduce using rule 22 (var_list -> empty .)
    THIS            reduce using rule 22 (var_list -> empty .)
    NULL            reduce using rule 22 (var_list -> empty .)
    RIGHT_BRACE     reduce using rule 22 (var_list -> empty .)


state 62

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list . statement_list RIGHT_BRACE
    (23) var_list -> var_list . var
    (20) statement_list -> . empty
    (21) statement_list -> . statement_list statement
    (24) var -> . type IDENTIFIER SEMICOLON
    (25) var -> . type IDENTIFIER ASSIGNMENT expression SEMICOLON
    (2) empty -> .
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]

    var                            shift and go to state 63
    statement_list                 shift and go to state 67
    type                           shift and go to state 66
    empty                          shift and go to state 64

state 63

    (23) var_list -> var_list var .

    BOOLEAN         reduce using rule 23 (var_list -> var_list var .)
    INT             reduce using rule 23 (var_list -> var_list var .)
    IDENTIFIER      reduce using rule 23 (var_list -> var_list var .)
    RETURN          reduce using rule 23 (var_list -> var_list var .)
    LEFT_BRACE      reduce using rule 23 (var_list -> var_list var .)
    IF              reduce using rule 23 (var_list -> var_list var .)
    WHILE           reduce using rule 23 (var_list -> var_list var .)
    SYSTEM          reduce using rule 23 (var_list -> var_list var .)
    LEFT_PARENTHESIS reduce using rule 23 (var_list -> var_list var .)
    MINUS           reduce using rule 23 (var_list -> var_list var .)
    NOT             reduce using rule 23 (var_list -> var_list var .)
    NEW             reduce using rule 23 (var_list -> var_list var .)
    INTEGER_LITERAL reduce using rule 23 (var_list -> var_list var .)
    TRUE            reduce using rule 23 (var_list -> var_list var .)
    FALSE           reduce using rule 23 (var_list -> var_list var .)
    THIS            reduce using rule 23 (var_list -> var_list var .)
    NULL            reduce using rule 23 (var_list -> var_list var .)
    RIGHT_BRACE     reduce using rule 23 (var_list -> var_list var .)


state 64

    (20) statement_list -> empty .

    RIGHT_BRACE     reduce using rule 20 (statement_list -> empty .)
    LEFT_BRACE      reduce using rule 20 (statement_list -> empty .)
    IF              reduce using rule 20 (statement_list -> empty .)
    WHILE           reduce using rule 20 (statement_list -> empty .)
    SYSTEM          reduce using rule 20 (statement_list -> empty .)
    LEFT_PARENTHESIS reduce using rule 20 (statement_list -> empty .)
    MINUS           reduce using rule 20 (statement_list -> empty .)
    NOT             reduce using rule 20 (statement_list -> empty .)
    NEW             reduce using rule 20 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 20 (statement_list -> empty .)
    INTEGER_LITERAL reduce using rule 20 (statement_list -> empty .)
    TRUE            reduce using rule 20 (statement_list -> empty .)
    FALSE           reduce using rule 20 (statement_list -> empty .)
    THIS            reduce using rule 20 (statement_list -> empty .)
    NULL            reduce using rule 20 (statement_list -> empty .)
    RETURN          reduce using rule 20 (statement_list -> empty .)


state 65

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list . RETURN expression SEMICOLON RIGHT_BRACE
    (21) statement_list -> statement_list . statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    RETURN          shift and go to state 68
    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 83
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 66

    (24) var -> type . IDENTIFIER SEMICOLON
    (25) var -> type . IDENTIFIER ASSIGNMENT expression SEMICOLON

    IDENTIFIER      shift and go to state 102


state 67

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list . RIGHT_BRACE
    (21) statement_list -> statement_list . statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    RIGHT_BRACE     shift and go to state 103
    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 83
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 68

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN . expression SEMICOLON RIGHT_BRACE
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    integer_literal_expression     shift and go to state 101
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    new_array_expression           shift and go to state 85
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 104
    call_method_expression         shift and go to state 98

state 69

    (47) expression -> unary_expression .

    ASSIGNMENT      reduce using rule 47 (expression -> unary_expression .)
    LEFT_BRACKET    reduce using rule 47 (expression -> unary_expression .)
    POINT           reduce using rule 47 (expression -> unary_expression .)
    OR              reduce using rule 47 (expression -> unary_expression .)
    AND             reduce using rule 47 (expression -> unary_expression .)
    EQUAL           reduce using rule 47 (expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> unary_expression .)
    GREATER         reduce using rule 47 (expression -> unary_expression .)
    LESS            reduce using rule 47 (expression -> unary_expression .)
    PLUS            reduce using rule 47 (expression -> unary_expression .)
    MINUS           reduce using rule 47 (expression -> unary_expression .)
    TIMES           reduce using rule 47 (expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 47 (expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 47 (expression -> unary_expression .)
    RIGHT_BRACKET   reduce using rule 47 (expression -> unary_expression .)
    COMMA           reduce using rule 47 (expression -> unary_expression .)


state 70

    (50) expression -> identifier_expression .

    ASSIGNMENT      reduce using rule 50 (expression -> identifier_expression .)
    LEFT_BRACKET    reduce using rule 50 (expression -> identifier_expression .)
    POINT           reduce using rule 50 (expression -> identifier_expression .)
    OR              reduce using rule 50 (expression -> identifier_expression .)
    AND             reduce using rule 50 (expression -> identifier_expression .)
    EQUAL           reduce using rule 50 (expression -> identifier_expression .)
    NOT_EQUAL       reduce using rule 50 (expression -> identifier_expression .)
    GREATER         reduce using rule 50 (expression -> identifier_expression .)
    LESS            reduce using rule 50 (expression -> identifier_expression .)
    PLUS            reduce using rule 50 (expression -> identifier_expression .)
    MINUS           reduce using rule 50 (expression -> identifier_expression .)
    TIMES           reduce using rule 50 (expression -> identifier_expression .)
    DIVIDE          reduce using rule 50 (expression -> identifier_expression .)
    SEMICOLON       reduce using rule 50 (expression -> identifier_expression .)
    RIGHT_PARENTHESIS reduce using rule 50 (expression -> identifier_expression .)
    RIGHT_BRACKET   reduce using rule 50 (expression -> identifier_expression .)
    COMMA           reduce using rule 50 (expression -> identifier_expression .)


state 71

    (38) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

    LEFT_PARENTHESIS shift and go to state 105


state 72

    (41) statement -> LEFT_BRACE . statement_list RIGHT_BRACE
    (20) statement_list -> . empty
    (21) statement_list -> . statement_list statement
    (2) empty -> .

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    IDENTIFIER      reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)

    statement_list                 shift and go to state 106
    empty                          shift and go to state 64

state 73

    (34) statement -> print_statement .

    RIGHT_BRACE     reduce using rule 34 (statement -> print_statement .)
    LEFT_BRACE      reduce using rule 34 (statement -> print_statement .)
    IF              reduce using rule 34 (statement -> print_statement .)
    WHILE           reduce using rule 34 (statement -> print_statement .)
    SYSTEM          reduce using rule 34 (statement -> print_statement .)
    LEFT_PARENTHESIS reduce using rule 34 (statement -> print_statement .)
    MINUS           reduce using rule 34 (statement -> print_statement .)
    NOT             reduce using rule 34 (statement -> print_statement .)
    NEW             reduce using rule 34 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 34 (statement -> print_statement .)
    INTEGER_LITERAL reduce using rule 34 (statement -> print_statement .)
    TRUE            reduce using rule 34 (statement -> print_statement .)
    FALSE           reduce using rule 34 (statement -> print_statement .)
    THIS            reduce using rule 34 (statement -> print_statement .)
    NULL            reduce using rule 34 (statement -> print_statement .)
    RETURN          reduce using rule 34 (statement -> print_statement .)
    ELSE            reduce using rule 34 (statement -> print_statement .)


state 74

    (48) expression -> new_expression .

    ASSIGNMENT      reduce using rule 48 (expression -> new_expression .)
    LEFT_BRACKET    reduce using rule 48 (expression -> new_expression .)
    POINT           reduce using rule 48 (expression -> new_expression .)
    OR              reduce using rule 48 (expression -> new_expression .)
    AND             reduce using rule 48 (expression -> new_expression .)
    EQUAL           reduce using rule 48 (expression -> new_expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> new_expression .)
    GREATER         reduce using rule 48 (expression -> new_expression .)
    LESS            reduce using rule 48 (expression -> new_expression .)
    PLUS            reduce using rule 48 (expression -> new_expression .)
    MINUS           reduce using rule 48 (expression -> new_expression .)
    TIMES           reduce using rule 48 (expression -> new_expression .)
    DIVIDE          reduce using rule 48 (expression -> new_expression .)
    SEMICOLON       reduce using rule 48 (expression -> new_expression .)
    RIGHT_PARENTHESIS reduce using rule 48 (expression -> new_expression .)
    RIGHT_BRACKET   reduce using rule 48 (expression -> new_expression .)
    COMMA           reduce using rule 48 (expression -> new_expression .)


state 75

    (82) null_expression -> NULL .

    LEFT_BRACKET    reduce using rule 82 (null_expression -> NULL .)
    POINT           reduce using rule 82 (null_expression -> NULL .)
    OR              reduce using rule 82 (null_expression -> NULL .)
    AND             reduce using rule 82 (null_expression -> NULL .)
    EQUAL           reduce using rule 82 (null_expression -> NULL .)
    NOT_EQUAL       reduce using rule 82 (null_expression -> NULL .)
    GREATER         reduce using rule 82 (null_expression -> NULL .)
    LESS            reduce using rule 82 (null_expression -> NULL .)
    PLUS            reduce using rule 82 (null_expression -> NULL .)
    MINUS           reduce using rule 82 (null_expression -> NULL .)
    TIMES           reduce using rule 82 (null_expression -> NULL .)
    DIVIDE          reduce using rule 82 (null_expression -> NULL .)
    ASSIGNMENT      reduce using rule 82 (null_expression -> NULL .)
    SEMICOLON       reduce using rule 82 (null_expression -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 82 (null_expression -> NULL .)
    RIGHT_BRACKET   reduce using rule 82 (null_expression -> NULL .)
    COMMA           reduce using rule 82 (null_expression -> NULL .)


state 76

    (79) boolean_expression -> TRUE .

    LEFT_BRACKET    reduce using rule 79 (boolean_expression -> TRUE .)
    POINT           reduce using rule 79 (boolean_expression -> TRUE .)
    OR              reduce using rule 79 (boolean_expression -> TRUE .)
    AND             reduce using rule 79 (boolean_expression -> TRUE .)
    EQUAL           reduce using rule 79 (boolean_expression -> TRUE .)
    NOT_EQUAL       reduce using rule 79 (boolean_expression -> TRUE .)
    GREATER         reduce using rule 79 (boolean_expression -> TRUE .)
    LESS            reduce using rule 79 (boolean_expression -> TRUE .)
    PLUS            reduce using rule 79 (boolean_expression -> TRUE .)
    MINUS           reduce using rule 79 (boolean_expression -> TRUE .)
    TIMES           reduce using rule 79 (boolean_expression -> TRUE .)
    DIVIDE          reduce using rule 79 (boolean_expression -> TRUE .)
    ASSIGNMENT      reduce using rule 79 (boolean_expression -> TRUE .)
    SEMICOLON       reduce using rule 79 (boolean_expression -> TRUE .)
    RIGHT_PARENTHESIS reduce using rule 79 (boolean_expression -> TRUE .)
    RIGHT_BRACKET   reduce using rule 79 (boolean_expression -> TRUE .)
    COMMA           reduce using rule 79 (boolean_expression -> TRUE .)


state 77

    (73) unary_expression -> MINUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 107
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 78

    (46) expression -> parenthesis_expression .

    ASSIGNMENT      reduce using rule 46 (expression -> parenthesis_expression .)
    LEFT_BRACKET    reduce using rule 46 (expression -> parenthesis_expression .)
    POINT           reduce using rule 46 (expression -> parenthesis_expression .)
    OR              reduce using rule 46 (expression -> parenthesis_expression .)
    AND             reduce using rule 46 (expression -> parenthesis_expression .)
    EQUAL           reduce using rule 46 (expression -> parenthesis_expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> parenthesis_expression .)
    GREATER         reduce using rule 46 (expression -> parenthesis_expression .)
    LESS            reduce using rule 46 (expression -> parenthesis_expression .)
    PLUS            reduce using rule 46 (expression -> parenthesis_expression .)
    MINUS           reduce using rule 46 (expression -> parenthesis_expression .)
    TIMES           reduce using rule 46 (expression -> parenthesis_expression .)
    DIVIDE          reduce using rule 46 (expression -> parenthesis_expression .)
    SEMICOLON       reduce using rule 46 (expression -> parenthesis_expression .)
    RIGHT_PARENTHESIS reduce using rule 46 (expression -> parenthesis_expression .)
    RIGHT_BRACKET   reduce using rule 46 (expression -> parenthesis_expression .)
    COMMA           reduce using rule 46 (expression -> parenthesis_expression .)


state 79

    (75) new_expression -> NEW . type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> NEW . type LEFT_BRACKET expression RIGHT_BRACKET
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 30
    INT             shift and go to state 29
    IDENTIFIER      shift and go to state 26

    type                           shift and go to state 108

state 80

    (35) statement -> assignment_statement .

    RIGHT_BRACE     reduce using rule 35 (statement -> assignment_statement .)
    LEFT_BRACE      reduce using rule 35 (statement -> assignment_statement .)
    IF              reduce using rule 35 (statement -> assignment_statement .)
    WHILE           reduce using rule 35 (statement -> assignment_statement .)
    SYSTEM          reduce using rule 35 (statement -> assignment_statement .)
    LEFT_PARENTHESIS reduce using rule 35 (statement -> assignment_statement .)
    MINUS           reduce using rule 35 (statement -> assignment_statement .)
    NOT             reduce using rule 35 (statement -> assignment_statement .)
    NEW             reduce using rule 35 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 35 (statement -> assignment_statement .)
    INTEGER_LITERAL reduce using rule 35 (statement -> assignment_statement .)
    TRUE            reduce using rule 35 (statement -> assignment_statement .)
    FALSE           reduce using rule 35 (statement -> assignment_statement .)
    THIS            reduce using rule 35 (statement -> assignment_statement .)
    NULL            reduce using rule 35 (statement -> assignment_statement .)
    RETURN          reduce using rule 35 (statement -> assignment_statement .)
    ELSE            reduce using rule 35 (statement -> assignment_statement .)


state 81

    (42) expression -> array_element_expression .

    ASSIGNMENT      reduce using rule 42 (expression -> array_element_expression .)
    LEFT_BRACKET    reduce using rule 42 (expression -> array_element_expression .)
    POINT           reduce using rule 42 (expression -> array_element_expression .)
    OR              reduce using rule 42 (expression -> array_element_expression .)
    AND             reduce using rule 42 (expression -> array_element_expression .)
    EQUAL           reduce using rule 42 (expression -> array_element_expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> array_element_expression .)
    GREATER         reduce using rule 42 (expression -> array_element_expression .)
    LESS            reduce using rule 42 (expression -> array_element_expression .)
    PLUS            reduce using rule 42 (expression -> array_element_expression .)
    MINUS           reduce using rule 42 (expression -> array_element_expression .)
    TIMES           reduce using rule 42 (expression -> array_element_expression .)
    DIVIDE          reduce using rule 42 (expression -> array_element_expression .)
    SEMICOLON       reduce using rule 42 (expression -> array_element_expression .)
    RIGHT_PARENTHESIS reduce using rule 42 (expression -> array_element_expression .)
    RIGHT_BRACKET   reduce using rule 42 (expression -> array_element_expression .)
    COMMA           reduce using rule 42 (expression -> array_element_expression .)


state 82

    (33) statement -> while_statement .

    RIGHT_BRACE     reduce using rule 33 (statement -> while_statement .)
    LEFT_BRACE      reduce using rule 33 (statement -> while_statement .)
    IF              reduce using rule 33 (statement -> while_statement .)
    WHILE           reduce using rule 33 (statement -> while_statement .)
    SYSTEM          reduce using rule 33 (statement -> while_statement .)
    LEFT_PARENTHESIS reduce using rule 33 (statement -> while_statement .)
    MINUS           reduce using rule 33 (statement -> while_statement .)
    NOT             reduce using rule 33 (statement -> while_statement .)
    NEW             reduce using rule 33 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 33 (statement -> while_statement .)
    INTEGER_LITERAL reduce using rule 33 (statement -> while_statement .)
    TRUE            reduce using rule 33 (statement -> while_statement .)
    FALSE           reduce using rule 33 (statement -> while_statement .)
    THIS            reduce using rule 33 (statement -> while_statement .)
    NULL            reduce using rule 33 (statement -> while_statement .)
    RETURN          reduce using rule 33 (statement -> while_statement .)
    ELSE            reduce using rule 33 (statement -> while_statement .)


state 83

    (21) statement_list -> statement_list statement .

    RIGHT_BRACE     reduce using rule 21 (statement_list -> statement_list statement .)
    LEFT_BRACE      reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    SYSTEM          reduce using rule 21 (statement_list -> statement_list statement .)
    LEFT_PARENTHESIS reduce using rule 21 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 21 (statement_list -> statement_list statement .)
    NOT             reduce using rule 21 (statement_list -> statement_list statement .)
    NEW             reduce using rule 21 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 21 (statement_list -> statement_list statement .)
    INTEGER_LITERAL reduce using rule 21 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 21 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 21 (statement_list -> statement_list statement .)
    THIS            reduce using rule 21 (statement_list -> statement_list statement .)
    NULL            reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)


state 84

    (32) statement -> if_statement .

    RIGHT_BRACE     reduce using rule 32 (statement -> if_statement .)
    LEFT_BRACE      reduce using rule 32 (statement -> if_statement .)
    IF              reduce using rule 32 (statement -> if_statement .)
    WHILE           reduce using rule 32 (statement -> if_statement .)
    SYSTEM          reduce using rule 32 (statement -> if_statement .)
    LEFT_PARENTHESIS reduce using rule 32 (statement -> if_statement .)
    MINUS           reduce using rule 32 (statement -> if_statement .)
    NOT             reduce using rule 32 (statement -> if_statement .)
    NEW             reduce using rule 32 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 32 (statement -> if_statement .)
    INTEGER_LITERAL reduce using rule 32 (statement -> if_statement .)
    TRUE            reduce using rule 32 (statement -> if_statement .)
    FALSE           reduce using rule 32 (statement -> if_statement .)
    THIS            reduce using rule 32 (statement -> if_statement .)
    NULL            reduce using rule 32 (statement -> if_statement .)
    RETURN          reduce using rule 32 (statement -> if_statement .)
    ELSE            reduce using rule 32 (statement -> if_statement .)


state 85

    (49) expression -> new_array_expression .

    ASSIGNMENT      reduce using rule 49 (expression -> new_array_expression .)
    LEFT_BRACKET    reduce using rule 49 (expression -> new_array_expression .)
    POINT           reduce using rule 49 (expression -> new_array_expression .)
    OR              reduce using rule 49 (expression -> new_array_expression .)
    AND             reduce using rule 49 (expression -> new_array_expression .)
    EQUAL           reduce using rule 49 (expression -> new_array_expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> new_array_expression .)
    GREATER         reduce using rule 49 (expression -> new_array_expression .)
    LESS            reduce using rule 49 (expression -> new_array_expression .)
    PLUS            reduce using rule 49 (expression -> new_array_expression .)
    MINUS           reduce using rule 49 (expression -> new_array_expression .)
    TIMES           reduce using rule 49 (expression -> new_array_expression .)
    DIVIDE          reduce using rule 49 (expression -> new_array_expression .)
    SEMICOLON       reduce using rule 49 (expression -> new_array_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (expression -> new_array_expression .)
    RIGHT_BRACKET   reduce using rule 49 (expression -> new_array_expression .)
    COMMA           reduce using rule 49 (expression -> new_array_expression .)


state 86

    (72) parenthesis_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 109
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 87

    (53) expression -> this_expression .

    ASSIGNMENT      reduce using rule 53 (expression -> this_expression .)
    LEFT_BRACKET    reduce using rule 53 (expression -> this_expression .)
    POINT           reduce using rule 53 (expression -> this_expression .)
    OR              reduce using rule 53 (expression -> this_expression .)
    AND             reduce using rule 53 (expression -> this_expression .)
    EQUAL           reduce using rule 53 (expression -> this_expression .)
    NOT_EQUAL       reduce using rule 53 (expression -> this_expression .)
    GREATER         reduce using rule 53 (expression -> this_expression .)
    LESS            reduce using rule 53 (expression -> this_expression .)
    PLUS            reduce using rule 53 (expression -> this_expression .)
    MINUS           reduce using rule 53 (expression -> this_expression .)
    TIMES           reduce using rule 53 (expression -> this_expression .)
    DIVIDE          reduce using rule 53 (expression -> this_expression .)
    SEMICOLON       reduce using rule 53 (expression -> this_expression .)
    RIGHT_PARENTHESIS reduce using rule 53 (expression -> this_expression .)
    RIGHT_BRACKET   reduce using rule 53 (expression -> this_expression .)
    COMMA           reduce using rule 53 (expression -> this_expression .)


state 88

    (54) expression -> null_expression .

    ASSIGNMENT      reduce using rule 54 (expression -> null_expression .)
    LEFT_BRACKET    reduce using rule 54 (expression -> null_expression .)
    POINT           reduce using rule 54 (expression -> null_expression .)
    OR              reduce using rule 54 (expression -> null_expression .)
    AND             reduce using rule 54 (expression -> null_expression .)
    EQUAL           reduce using rule 54 (expression -> null_expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> null_expression .)
    GREATER         reduce using rule 54 (expression -> null_expression .)
    LESS            reduce using rule 54 (expression -> null_expression .)
    PLUS            reduce using rule 54 (expression -> null_expression .)
    MINUS           reduce using rule 54 (expression -> null_expression .)
    TIMES           reduce using rule 54 (expression -> null_expression .)
    DIVIDE          reduce using rule 54 (expression -> null_expression .)
    SEMICOLON       reduce using rule 54 (expression -> null_expression .)
    RIGHT_PARENTHESIS reduce using rule 54 (expression -> null_expression .)
    RIGHT_BRACKET   reduce using rule 54 (expression -> null_expression .)
    COMMA           reduce using rule 54 (expression -> null_expression .)


state 89

    (43) expression -> field_expression .

    ASSIGNMENT      reduce using rule 43 (expression -> field_expression .)
    LEFT_BRACKET    reduce using rule 43 (expression -> field_expression .)
    POINT           reduce using rule 43 (expression -> field_expression .)
    OR              reduce using rule 43 (expression -> field_expression .)
    AND             reduce using rule 43 (expression -> field_expression .)
    EQUAL           reduce using rule 43 (expression -> field_expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> field_expression .)
    GREATER         reduce using rule 43 (expression -> field_expression .)
    LESS            reduce using rule 43 (expression -> field_expression .)
    PLUS            reduce using rule 43 (expression -> field_expression .)
    MINUS           reduce using rule 43 (expression -> field_expression .)
    TIMES           reduce using rule 43 (expression -> field_expression .)
    DIVIDE          reduce using rule 43 (expression -> field_expression .)
    SEMICOLON       reduce using rule 43 (expression -> field_expression .)
    RIGHT_PARENTHESIS reduce using rule 43 (expression -> field_expression .)
    RIGHT_BRACKET   reduce using rule 43 (expression -> field_expression .)
    COMMA           reduce using rule 43 (expression -> field_expression .)


state 90

    (78) integer_literal_expression -> INTEGER_LITERAL .

    LEFT_BRACKET    reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    POINT           reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    OR              reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    AND             reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    GREATER         reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    LESS            reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    TIMES           reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    ASSIGNMENT      reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    SEMICOLON       reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_BRACKET   reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 78 (integer_literal_expression -> INTEGER_LITERAL .)


state 91

    (74) unary_expression -> NOT . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 110
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 92

    (36) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement

    LEFT_PARENTHESIS shift and go to state 111


state 93

    (77) identifier_expression -> IDENTIFIER .

    LEFT_BRACKET    reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    POINT           reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    OR              reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    AND             reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    GREATER         reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    LESS            reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    PLUS            reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    MINUS           reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    TIMES           reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 77 (identifier_expression -> IDENTIFIER .)
    COMMA           reduce using rule 77 (identifier_expression -> IDENTIFIER .)


state 94

    (80) boolean_expression -> FALSE .

    LEFT_BRACKET    reduce using rule 80 (boolean_expression -> FALSE .)
    POINT           reduce using rule 80 (boolean_expression -> FALSE .)
    OR              reduce using rule 80 (boolean_expression -> FALSE .)
    AND             reduce using rule 80 (boolean_expression -> FALSE .)
    EQUAL           reduce using rule 80 (boolean_expression -> FALSE .)
    NOT_EQUAL       reduce using rule 80 (boolean_expression -> FALSE .)
    GREATER         reduce using rule 80 (boolean_expression -> FALSE .)
    LESS            reduce using rule 80 (boolean_expression -> FALSE .)
    PLUS            reduce using rule 80 (boolean_expression -> FALSE .)
    MINUS           reduce using rule 80 (boolean_expression -> FALSE .)
    TIMES           reduce using rule 80 (boolean_expression -> FALSE .)
    DIVIDE          reduce using rule 80 (boolean_expression -> FALSE .)
    ASSIGNMENT      reduce using rule 80 (boolean_expression -> FALSE .)
    SEMICOLON       reduce using rule 80 (boolean_expression -> FALSE .)
    RIGHT_PARENTHESIS reduce using rule 80 (boolean_expression -> FALSE .)
    RIGHT_BRACKET   reduce using rule 80 (boolean_expression -> FALSE .)
    COMMA           reduce using rule 80 (boolean_expression -> FALSE .)


state 95

    (45) expression -> binary_expression .

    ASSIGNMENT      reduce using rule 45 (expression -> binary_expression .)
    LEFT_BRACKET    reduce using rule 45 (expression -> binary_expression .)
    POINT           reduce using rule 45 (expression -> binary_expression .)
    OR              reduce using rule 45 (expression -> binary_expression .)
    AND             reduce using rule 45 (expression -> binary_expression .)
    EQUAL           reduce using rule 45 (expression -> binary_expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> binary_expression .)
    GREATER         reduce using rule 45 (expression -> binary_expression .)
    LESS            reduce using rule 45 (expression -> binary_expression .)
    PLUS            reduce using rule 45 (expression -> binary_expression .)
    MINUS           reduce using rule 45 (expression -> binary_expression .)
    TIMES           reduce using rule 45 (expression -> binary_expression .)
    DIVIDE          reduce using rule 45 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 45 (expression -> binary_expression .)
    RIGHT_PARENTHESIS reduce using rule 45 (expression -> binary_expression .)
    RIGHT_BRACKET   reduce using rule 45 (expression -> binary_expression .)
    COMMA           reduce using rule 45 (expression -> binary_expression .)


state 96

    (52) expression -> boolean_expression .

    ASSIGNMENT      reduce using rule 52 (expression -> boolean_expression .)
    LEFT_BRACKET    reduce using rule 52 (expression -> boolean_expression .)
    POINT           reduce using rule 52 (expression -> boolean_expression .)
    OR              reduce using rule 52 (expression -> boolean_expression .)
    AND             reduce using rule 52 (expression -> boolean_expression .)
    EQUAL           reduce using rule 52 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 52 (expression -> boolean_expression .)
    GREATER         reduce using rule 52 (expression -> boolean_expression .)
    LESS            reduce using rule 52 (expression -> boolean_expression .)
    PLUS            reduce using rule 52 (expression -> boolean_expression .)
    MINUS           reduce using rule 52 (expression -> boolean_expression .)
    TIMES           reduce using rule 52 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 52 (expression -> boolean_expression .)
    SEMICOLON       reduce using rule 52 (expression -> boolean_expression .)
    RIGHT_PARENTHESIS reduce using rule 52 (expression -> boolean_expression .)
    RIGHT_BRACKET   reduce using rule 52 (expression -> boolean_expression .)
    COMMA           reduce using rule 52 (expression -> boolean_expression .)


state 97

    (81) this_expression -> THIS .

    LEFT_BRACKET    reduce using rule 81 (this_expression -> THIS .)
    POINT           reduce using rule 81 (this_expression -> THIS .)
    OR              reduce using rule 81 (this_expression -> THIS .)
    AND             reduce using rule 81 (this_expression -> THIS .)
    EQUAL           reduce using rule 81 (this_expression -> THIS .)
    NOT_EQUAL       reduce using rule 81 (this_expression -> THIS .)
    GREATER         reduce using rule 81 (this_expression -> THIS .)
    LESS            reduce using rule 81 (this_expression -> THIS .)
    PLUS            reduce using rule 81 (this_expression -> THIS .)
    MINUS           reduce using rule 81 (this_expression -> THIS .)
    TIMES           reduce using rule 81 (this_expression -> THIS .)
    DIVIDE          reduce using rule 81 (this_expression -> THIS .)
    ASSIGNMENT      reduce using rule 81 (this_expression -> THIS .)
    SEMICOLON       reduce using rule 81 (this_expression -> THIS .)
    RIGHT_PARENTHESIS reduce using rule 81 (this_expression -> THIS .)
    RIGHT_BRACKET   reduce using rule 81 (this_expression -> THIS .)
    COMMA           reduce using rule 81 (this_expression -> THIS .)


state 98

    (44) expression -> call_method_expression .

    ASSIGNMENT      reduce using rule 44 (expression -> call_method_expression .)
    LEFT_BRACKET    reduce using rule 44 (expression -> call_method_expression .)
    POINT           reduce using rule 44 (expression -> call_method_expression .)
    OR              reduce using rule 44 (expression -> call_method_expression .)
    AND             reduce using rule 44 (expression -> call_method_expression .)
    EQUAL           reduce using rule 44 (expression -> call_method_expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> call_method_expression .)
    GREATER         reduce using rule 44 (expression -> call_method_expression .)
    LESS            reduce using rule 44 (expression -> call_method_expression .)
    PLUS            reduce using rule 44 (expression -> call_method_expression .)
    MINUS           reduce using rule 44 (expression -> call_method_expression .)
    TIMES           reduce using rule 44 (expression -> call_method_expression .)
    DIVIDE          reduce using rule 44 (expression -> call_method_expression .)
    SEMICOLON       reduce using rule 44 (expression -> call_method_expression .)
    RIGHT_PARENTHESIS reduce using rule 44 (expression -> call_method_expression .)
    RIGHT_BRACKET   reduce using rule 44 (expression -> call_method_expression .)
    COMMA           reduce using rule 44 (expression -> call_method_expression .)


state 99

    (39) print_statement -> SYSTEM . POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 112


state 100

    (40) assignment_statement -> expression . ASSIGNMENT expression SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    ASSIGNMENT      shift and go to state 118
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 101

    (51) expression -> integer_literal_expression .

    ASSIGNMENT      reduce using rule 51 (expression -> integer_literal_expression .)
    LEFT_BRACKET    reduce using rule 51 (expression -> integer_literal_expression .)
    POINT           reduce using rule 51 (expression -> integer_literal_expression .)
    OR              reduce using rule 51 (expression -> integer_literal_expression .)
    AND             reduce using rule 51 (expression -> integer_literal_expression .)
    EQUAL           reduce using rule 51 (expression -> integer_literal_expression .)
    NOT_EQUAL       reduce using rule 51 (expression -> integer_literal_expression .)
    GREATER         reduce using rule 51 (expression -> integer_literal_expression .)
    LESS            reduce using rule 51 (expression -> integer_literal_expression .)
    PLUS            reduce using rule 51 (expression -> integer_literal_expression .)
    MINUS           reduce using rule 51 (expression -> integer_literal_expression .)
    TIMES           reduce using rule 51 (expression -> integer_literal_expression .)
    DIVIDE          reduce using rule 51 (expression -> integer_literal_expression .)
    SEMICOLON       reduce using rule 51 (expression -> integer_literal_expression .)
    RIGHT_PARENTHESIS reduce using rule 51 (expression -> integer_literal_expression .)
    RIGHT_BRACKET   reduce using rule 51 (expression -> integer_literal_expression .)
    COMMA           reduce using rule 51 (expression -> integer_literal_expression .)


state 102

    (24) var -> type IDENTIFIER . SEMICOLON
    (25) var -> type IDENTIFIER . ASSIGNMENT expression SEMICOLON

    SEMICOLON       shift and go to state 127
    ASSIGNMENT      shift and go to state 126


state 103

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 6 (main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE .)


state 104

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression . SEMICOLON RIGHT_BRACE
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 128
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 105

    (38) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    binary_expression              shift and go to state 95
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    field_expression               shift and go to state 89
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    expression                     shift and go to state 129
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 106

    (41) statement -> LEFT_BRACE statement_list . RIGHT_BRACE
    (21) statement_list -> statement_list . statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    RIGHT_BRACE     shift and go to state 130
    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 83
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 107

    (73) unary_expression -> MINUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 73 (unary_expression -> MINUS expression .)
    OR              reduce using rule 73 (unary_expression -> MINUS expression .)
    AND             reduce using rule 73 (unary_expression -> MINUS expression .)
    EQUAL           reduce using rule 73 (unary_expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 73 (unary_expression -> MINUS expression .)
    GREATER         reduce using rule 73 (unary_expression -> MINUS expression .)
    LESS            reduce using rule 73 (unary_expression -> MINUS expression .)
    PLUS            reduce using rule 73 (unary_expression -> MINUS expression .)
    MINUS           reduce using rule 73 (unary_expression -> MINUS expression .)
    TIMES           reduce using rule 73 (unary_expression -> MINUS expression .)
    DIVIDE          reduce using rule 73 (unary_expression -> MINUS expression .)
    ASSIGNMENT      reduce using rule 73 (unary_expression -> MINUS expression .)
    SEMICOLON       reduce using rule 73 (unary_expression -> MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 73 (unary_expression -> MINUS expression .)
    RIGHT_BRACKET   reduce using rule 73 (unary_expression -> MINUS expression .)
    COMMA           reduce using rule 73 (unary_expression -> MINUS expression .)
    POINT           shift and go to state 117

  ! POINT           [ reduce using rule 73 (unary_expression -> MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! TIMES           [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 125 ]


state 108

    (75) new_expression -> NEW type . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> NEW type . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_PARENTHESIS shift and go to state 132
    LEFT_BRACKET    shift and go to state 131


state 109

    (72) parenthesis_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 133
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 110

    (74) unary_expression -> NOT expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 74 (unary_expression -> NOT expression .)
    OR              reduce using rule 74 (unary_expression -> NOT expression .)
    AND             reduce using rule 74 (unary_expression -> NOT expression .)
    EQUAL           reduce using rule 74 (unary_expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 74 (unary_expression -> NOT expression .)
    GREATER         reduce using rule 74 (unary_expression -> NOT expression .)
    LESS            reduce using rule 74 (unary_expression -> NOT expression .)
    PLUS            reduce using rule 74 (unary_expression -> NOT expression .)
    MINUS           reduce using rule 74 (unary_expression -> NOT expression .)
    TIMES           reduce using rule 74 (unary_expression -> NOT expression .)
    DIVIDE          reduce using rule 74 (unary_expression -> NOT expression .)
    ASSIGNMENT      reduce using rule 74 (unary_expression -> NOT expression .)
    SEMICOLON       reduce using rule 74 (unary_expression -> NOT expression .)
    RIGHT_PARENTHESIS reduce using rule 74 (unary_expression -> NOT expression .)
    RIGHT_BRACKET   reduce using rule 74 (unary_expression -> NOT expression .)
    COMMA           reduce using rule 74 (unary_expression -> NOT expression .)
    POINT           shift and go to state 117

  ! POINT           [ reduce using rule 74 (unary_expression -> NOT expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! TIMES           [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 125 ]


state 111

    (36) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (37) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement ELSE statement
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    binary_expression              shift and go to state 95
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    field_expression               shift and go to state 89
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    expression                     shift and go to state 134
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 112

    (39) print_statement -> SYSTEM POINT . OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    OUT             shift and go to state 135


state 113

    (63) binary_expression -> expression AND . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 136
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 114

    (70) binary_expression -> expression TIMES . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 137
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 115

    (65) binary_expression -> expression NOT_EQUAL . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 138
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 116

    (66) binary_expression -> expression GREATER . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 139
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 117

    (56) field_expression -> expression POINT . IDENTIFIER
    (57) call_method_expression -> expression POINT . IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 140


state 118

    (40) assignment_statement -> expression ASSIGNMENT . expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 141
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 119

    (67) binary_expression -> expression LESS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 142
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 120

    (64) binary_expression -> expression EQUAL . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 143
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 121

    (62) binary_expression -> expression OR . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 144
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 122

    (68) binary_expression -> expression PLUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 145
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 123

    (69) binary_expression -> expression MINUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 146
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 124

    (55) array_element_expression -> expression LEFT_BRACKET . expression RIGHT_BRACKET
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 147
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 125

    (71) binary_expression -> expression DIVIDE . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 148
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 126

    (25) var -> type IDENTIFIER ASSIGNMENT . expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 149
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 127

    (24) var -> type IDENTIFIER SEMICOLON .

    BOOLEAN         reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    SYSTEM          reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    INTEGER_LITERAL reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type IDENTIFIER SEMICOLON .)


state 128

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 150


state 129

    (38) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 151
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 130

    (41) statement -> LEFT_BRACE statement_list RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    LEFT_BRACE      reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    IF              reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    WHILE           reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    SYSTEM          reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    LEFT_PARENTHESIS reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    MINUS           reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NOT             reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NEW             reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    INTEGER_LITERAL reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    TRUE            reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    FALSE           reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    THIS            reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NULL            reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    RETURN          reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    ELSE            reduce using rule 41 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)


state 131

    (76) new_array_expression -> NEW type LEFT_BRACKET . expression RIGHT_BRACKET
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 152
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 132

    (75) new_expression -> NEW type LEFT_PARENTHESIS . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 153


state 133

    (72) parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    RIGHT_PARENTHESIS reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    POINT           reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASSIGNMENT      reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 72 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 134

    (36) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (37) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement ELSE statement
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 154
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 135

    (39) print_statement -> SYSTEM POINT OUT . POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 155


state 136

    (63) binary_expression -> expression AND expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 63 (binary_expression -> expression AND expression .)
    OR              reduce using rule 63 (binary_expression -> expression AND expression .)
    AND             reduce using rule 63 (binary_expression -> expression AND expression .)
    ASSIGNMENT      reduce using rule 63 (binary_expression -> expression AND expression .)
    SEMICOLON       reduce using rule 63 (binary_expression -> expression AND expression .)
    RIGHT_PARENTHESIS reduce using rule 63 (binary_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 63 (binary_expression -> expression AND expression .)
    COMMA           reduce using rule 63 (binary_expression -> expression AND expression .)
    POINT           shift and go to state 117
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 63 (binary_expression -> expression AND expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]


state 137

    (70) binary_expression -> expression TIMES expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 70 (binary_expression -> expression TIMES expression .)
    OR              reduce using rule 70 (binary_expression -> expression TIMES expression .)
    AND             reduce using rule 70 (binary_expression -> expression TIMES expression .)
    EQUAL           reduce using rule 70 (binary_expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 70 (binary_expression -> expression TIMES expression .)
    GREATER         reduce using rule 70 (binary_expression -> expression TIMES expression .)
    LESS            reduce using rule 70 (binary_expression -> expression TIMES expression .)
    PLUS            reduce using rule 70 (binary_expression -> expression TIMES expression .)
    MINUS           reduce using rule 70 (binary_expression -> expression TIMES expression .)
    TIMES           reduce using rule 70 (binary_expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 70 (binary_expression -> expression TIMES expression .)
    ASSIGNMENT      reduce using rule 70 (binary_expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 70 (binary_expression -> expression TIMES expression .)
    RIGHT_PARENTHESIS reduce using rule 70 (binary_expression -> expression TIMES expression .)
    RIGHT_BRACKET   reduce using rule 70 (binary_expression -> expression TIMES expression .)
    COMMA           reduce using rule 70 (binary_expression -> expression TIMES expression .)
    POINT           shift and go to state 117

  ! POINT           [ reduce using rule 70 (binary_expression -> expression TIMES expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! TIMES           [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 125 ]


state 138

    (65) binary_expression -> expression NOT_EQUAL expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    GREATER         reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    LESS            reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    ASSIGNMENT      reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .)
    POINT           shift and go to state 117
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]


state 139

    (66) binary_expression -> expression GREATER expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 66 (binary_expression -> expression GREATER expression .)
    OR              reduce using rule 66 (binary_expression -> expression GREATER expression .)
    AND             reduce using rule 66 (binary_expression -> expression GREATER expression .)
    EQUAL           reduce using rule 66 (binary_expression -> expression GREATER expression .)
    NOT_EQUAL       reduce using rule 66 (binary_expression -> expression GREATER expression .)
    GREATER         reduce using rule 66 (binary_expression -> expression GREATER expression .)
    LESS            reduce using rule 66 (binary_expression -> expression GREATER expression .)
    ASSIGNMENT      reduce using rule 66 (binary_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 66 (binary_expression -> expression GREATER expression .)
    RIGHT_PARENTHESIS reduce using rule 66 (binary_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 66 (binary_expression -> expression GREATER expression .)
    COMMA           reduce using rule 66 (binary_expression -> expression GREATER expression .)
    POINT           shift and go to state 117
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 66 (binary_expression -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 66 (binary_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 66 (binary_expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 66 (binary_expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> expression GREATER expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]


state 140

    (56) field_expression -> expression POINT IDENTIFIER .
    (57) call_method_expression -> expression POINT IDENTIFIER . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    POINT           reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    OR              reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    AND             reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    EQUAL           reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    NOT_EQUAL       reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    GREATER         reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    LESS            reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    PLUS            reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    MINUS           reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    TIMES           reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    DIVIDE          reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    ASSIGNMENT      reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    SEMICOLON       reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    COMMA           reduce using rule 56 (field_expression -> expression POINT IDENTIFIER .)
    LEFT_PARENTHESIS shift and go to state 156


state 141

    (40) assignment_statement -> expression ASSIGNMENT expression . SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 157
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 142

    (67) binary_expression -> expression LESS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 67 (binary_expression -> expression LESS expression .)
    OR              reduce using rule 67 (binary_expression -> expression LESS expression .)
    AND             reduce using rule 67 (binary_expression -> expression LESS expression .)
    EQUAL           reduce using rule 67 (binary_expression -> expression LESS expression .)
    NOT_EQUAL       reduce using rule 67 (binary_expression -> expression LESS expression .)
    GREATER         reduce using rule 67 (binary_expression -> expression LESS expression .)
    LESS            reduce using rule 67 (binary_expression -> expression LESS expression .)
    ASSIGNMENT      reduce using rule 67 (binary_expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 67 (binary_expression -> expression LESS expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (binary_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 67 (binary_expression -> expression LESS expression .)
    COMMA           reduce using rule 67 (binary_expression -> expression LESS expression .)
    POINT           shift and go to state 117
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 67 (binary_expression -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 67 (binary_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 67 (binary_expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 67 (binary_expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 67 (binary_expression -> expression LESS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]


state 143

    (64) binary_expression -> expression EQUAL expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    OR              reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    AND             reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    GREATER         reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    LESS            reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    ASSIGNMENT      reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    RIGHT_PARENTHESIS reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 64 (binary_expression -> expression EQUAL expression .)
    POINT           shift and go to state 117
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 64 (binary_expression -> expression EQUAL expression .) ]
  ! PLUS            [ reduce using rule 64 (binary_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 64 (binary_expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 64 (binary_expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 64 (binary_expression -> expression EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]


state 144

    (62) binary_expression -> expression OR expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 62 (binary_expression -> expression OR expression .)
    OR              reduce using rule 62 (binary_expression -> expression OR expression .)
    AND             reduce using rule 62 (binary_expression -> expression OR expression .)
    ASSIGNMENT      reduce using rule 62 (binary_expression -> expression OR expression .)
    SEMICOLON       reduce using rule 62 (binary_expression -> expression OR expression .)
    RIGHT_PARENTHESIS reduce using rule 62 (binary_expression -> expression OR expression .)
    RIGHT_BRACKET   reduce using rule 62 (binary_expression -> expression OR expression .)
    COMMA           reduce using rule 62 (binary_expression -> expression OR expression .)
    POINT           shift and go to state 117
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 62 (binary_expression -> expression OR expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]


state 145

    (68) binary_expression -> expression PLUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 68 (binary_expression -> expression PLUS expression .)
    OR              reduce using rule 68 (binary_expression -> expression PLUS expression .)
    AND             reduce using rule 68 (binary_expression -> expression PLUS expression .)
    EQUAL           reduce using rule 68 (binary_expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 68 (binary_expression -> expression PLUS expression .)
    GREATER         reduce using rule 68 (binary_expression -> expression PLUS expression .)
    LESS            reduce using rule 68 (binary_expression -> expression PLUS expression .)
    PLUS            reduce using rule 68 (binary_expression -> expression PLUS expression .)
    MINUS           reduce using rule 68 (binary_expression -> expression PLUS expression .)
    ASSIGNMENT      reduce using rule 68 (binary_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 68 (binary_expression -> expression PLUS expression .)
    RIGHT_PARENTHESIS reduce using rule 68 (binary_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 68 (binary_expression -> expression PLUS expression .)
    COMMA           reduce using rule 68 (binary_expression -> expression PLUS expression .)
    POINT           shift and go to state 117
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 68 (binary_expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 68 (binary_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 68 (binary_expression -> expression PLUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]


state 146

    (69) binary_expression -> expression MINUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 69 (binary_expression -> expression MINUS expression .)
    OR              reduce using rule 69 (binary_expression -> expression MINUS expression .)
    AND             reduce using rule 69 (binary_expression -> expression MINUS expression .)
    EQUAL           reduce using rule 69 (binary_expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 69 (binary_expression -> expression MINUS expression .)
    GREATER         reduce using rule 69 (binary_expression -> expression MINUS expression .)
    LESS            reduce using rule 69 (binary_expression -> expression MINUS expression .)
    PLUS            reduce using rule 69 (binary_expression -> expression MINUS expression .)
    MINUS           reduce using rule 69 (binary_expression -> expression MINUS expression .)
    ASSIGNMENT      reduce using rule 69 (binary_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 69 (binary_expression -> expression MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 69 (binary_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 69 (binary_expression -> expression MINUS expression .)
    COMMA           reduce using rule 69 (binary_expression -> expression MINUS expression .)
    POINT           shift and go to state 117
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125

  ! POINT           [ reduce using rule 69 (binary_expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 69 (binary_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 69 (binary_expression -> expression MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]


state 147

    (55) array_element_expression -> expression LEFT_BRACKET expression . RIGHT_BRACKET
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 158
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 148

    (71) binary_expression -> expression DIVIDE expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    LEFT_BRACKET    reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    OR              reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    AND             reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    LESS            reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    ASSIGNMENT      reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    RIGHT_PARENTHESIS reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    RIGHT_BRACKET   reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 71 (binary_expression -> expression DIVIDE expression .)
    POINT           shift and go to state 117

  ! POINT           [ reduce using rule 71 (binary_expression -> expression DIVIDE expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 124 ]
  ! OR              [ shift and go to state 121 ]
  ! AND             [ shift and go to state 113 ]
  ! EQUAL           [ shift and go to state 120 ]
  ! NOT_EQUAL       [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 116 ]
  ! LESS            [ shift and go to state 119 ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 123 ]
  ! TIMES           [ shift and go to state 114 ]
  ! DIVIDE          [ shift and go to state 125 ]


state 149

    (25) var -> type IDENTIFIER ASSIGNMENT expression . SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 159
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 150

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    PUBLIC          reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    BOOLEAN         reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    INT             reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)


state 151

    (38) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 160
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 152

    (76) new_array_expression -> NEW type LEFT_BRACKET expression . RIGHT_BRACKET
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 161
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 153

    (75) new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    POINT           reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS            reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    ASSIGNMENT      reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 75 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 154

    (36) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement ELSE statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 162
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 155

    (39) print_statement -> SYSTEM POINT OUT POINT . PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    PRINTLN         shift and go to state 163


state 156

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS . expression_list RIGHT_PARENTHESIS
    (58) expression_list -> . empty
    (59) expression_list -> . nonempty_expression_list
    (2) empty -> .
    (60) nonempty_expression_list -> . expression
    (61) nonempty_expression_list -> . expression_list COMMA expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    RIGHT_PARENTHESIS reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    expression                     shift and go to state 165
    expression_list                shift and go to state 166
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    nonempty_expression_list       shift and go to state 167
    new_array_expression           shift and go to state 85
    empty                          shift and go to state 164
    call_method_expression         shift and go to state 98

state 157

    (40) assignment_statement -> expression ASSIGNMENT expression SEMICOLON .

    RIGHT_BRACE     reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    LEFT_BRACE      reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    SYSTEM          reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NEW             reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    INTEGER_LITERAL reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    TRUE            reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    FALSE           reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    THIS            reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NULL            reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    ELSE            reduce using rule 40 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)


state 158

    (55) array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .

    LEFT_BRACKET    reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)


state 159

    (25) var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .

    BOOLEAN         reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    INT             reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    RIGHT_BRACE     reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    LEFT_BRACE      reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    SYSTEM          reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NEW             reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    INTEGER_LITERAL reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    TRUE            reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    FALSE           reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    THIS            reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NULL            reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 25 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)


state 160

    (38) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    RETURN          reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_BRACE      reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SYSTEM          reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NEW             reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTEGER_LITERAL reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THIS            reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_BRACE     reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 38 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 161

    (76) new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .

    RIGHT_BRACKET   reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 76 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)


state 162

    (36) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_BRACE      reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SYSTEM          reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NEW             reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTEGER_LITERAL reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THIS            reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_BRACE     reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 168

  ! ELSE            [ reduce using rule 36 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]


state 163

    (39) print_statement -> SYSTEM POINT OUT POINT PRINTLN . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 169


state 164

    (58) expression_list -> empty .

    RIGHT_PARENTHESIS reduce using rule 58 (expression_list -> empty .)
    COMMA           reduce using rule 58 (expression_list -> empty .)


state 165

    (60) nonempty_expression_list -> expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 60 (nonempty_expression_list -> expression .)
    COMMA           reduce using rule 60 (nonempty_expression_list -> expression .)
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 166

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list . RIGHT_PARENTHESIS
    (61) nonempty_expression_list -> expression_list . COMMA expression

    RIGHT_PARENTHESIS shift and go to state 171
    COMMA           shift and go to state 170


state 167

    (59) expression_list -> nonempty_expression_list .

    RIGHT_PARENTHESIS reduce using rule 59 (expression_list -> nonempty_expression_list .)
    COMMA           reduce using rule 59 (expression_list -> nonempty_expression_list .)


state 168

    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE . statement
    (32) statement -> . if_statement
    (33) statement -> . while_statement
    (34) statement -> . print_statement
    (35) statement -> . assignment_statement
    (41) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (36) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (38) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (39) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (40) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 72
    IF              shift and go to state 92
    WHILE           shift and go to state 71
    SYSTEM          shift and go to state 99
    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    integer_literal_expression     shift and go to state 101
    print_statement                shift and go to state 73
    new_expression                 shift and go to state 74
    parenthesis_expression         shift and go to state 78
    assignment_statement           shift and go to state 80
    array_element_expression       shift and go to state 81
    while_statement                shift and go to state 82
    statement                      shift and go to state 172
    if_statement                   shift and go to state 84
    new_array_expression           shift and go to state 85
    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    call_method_expression         shift and go to state 98
    binary_expression              shift and go to state 95
    boolean_expression             shift and go to state 96
    expression                     shift and go to state 100

state 169

    (39) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 173
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 170

    (61) nonempty_expression_list -> expression_list COMMA . expression
    (42) expression -> . array_element_expression
    (43) expression -> . field_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> . expression POINT IDENTIFIER
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> . expression OR expression
    (63) binary_expression -> . expression AND expression
    (64) binary_expression -> . expression EQUAL expression
    (65) binary_expression -> . expression NOT_EQUAL expression
    (66) binary_expression -> . expression GREATER expression
    (67) binary_expression -> . expression LESS expression
    (68) binary_expression -> . expression PLUS expression
    (69) binary_expression -> . expression MINUS expression
    (70) binary_expression -> . expression TIMES expression
    (71) binary_expression -> . expression DIVIDE expression
    (72) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (73) unary_expression -> . MINUS expression
    (74) unary_expression -> . NOT expression
    (75) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (76) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (77) identifier_expression -> . IDENTIFIER
    (78) integer_literal_expression -> . INTEGER_LITERAL
    (79) boolean_expression -> . TRUE
    (80) boolean_expression -> . FALSE
    (81) this_expression -> . THIS
    (82) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 86
    MINUS           shift and go to state 77
    NOT             shift and go to state 91
    NEW             shift and go to state 79
    IDENTIFIER      shift and go to state 93
    INTEGER_LITERAL shift and go to state 90
    TRUE            shift and go to state 76
    FALSE           shift and go to state 94
    THIS            shift and go to state 97
    NULL            shift and go to state 75

    this_expression                shift and go to state 87
    null_expression                shift and go to state 88
    field_expression               shift and go to state 89
    unary_expression               shift and go to state 69
    identifier_expression          shift and go to state 70
    parenthesis_expression         shift and go to state 78
    array_element_expression       shift and go to state 81
    boolean_expression             shift and go to state 96
    integer_literal_expression     shift and go to state 101
    new_expression                 shift and go to state 74
    binary_expression              shift and go to state 95
    expression                     shift and go to state 174
    new_array_expression           shift and go to state 85
    call_method_expression         shift and go to state 98

state 171

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .

    ASSIGNMENT      reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    POINT           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)


state 172

    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .

    RETURN          reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_BRACE      reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IF              reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SYSTEM          reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_PARENTHESIS reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NOT             reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NEW             reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IDENTIFIER      reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    INTEGER_LITERAL reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TRUE            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FALSE           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    THIS            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NULL            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    RIGHT_BRACE     reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)


state 173

    (39) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 175
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 174

    (61) nonempty_expression_list -> expression_list COMMA expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) field_expression -> expression . POINT IDENTIFIER
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (62) binary_expression -> expression . OR expression
    (63) binary_expression -> expression . AND expression
    (64) binary_expression -> expression . EQUAL expression
    (65) binary_expression -> expression . NOT_EQUAL expression
    (66) binary_expression -> expression . GREATER expression
    (67) binary_expression -> expression . LESS expression
    (68) binary_expression -> expression . PLUS expression
    (69) binary_expression -> expression . MINUS expression
    (70) binary_expression -> expression . TIMES expression
    (71) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 61 (nonempty_expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 61 (nonempty_expression_list -> expression_list COMMA expression .)
    LEFT_BRACKET    shift and go to state 124
    POINT           shift and go to state 117
    OR              shift and go to state 121
    AND             shift and go to state 113
    EQUAL           shift and go to state 120
    NOT_EQUAL       shift and go to state 115
    GREATER         shift and go to state 116
    LESS            shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 125


state 175

    (39) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 176


state 176

    (39) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    RETURN          reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_BRACE      reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SYSTEM          reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NOT             reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INTEGER_LITERAL reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRUE            reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FALSE           reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    THIS            reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_BRACE     reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 39 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_BRACKET in state 26 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 29 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 30 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 60 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 162 resolved as shift
