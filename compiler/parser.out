Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programm
Rule 1     programm -> main_class class_list
Rule 2     empty -> <empty>
Rule 3     class_list -> empty
Rule 4     class_list -> class class_list
Rule 5     main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE
Rule 6     main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE
Rule 7     class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE
Rule 8     extends -> empty
Rule 9     extends -> EXTENDS IDENTIFIER
Rule 10    declaration_list -> empty
Rule 11    declaration_list -> field declaration_list
Rule 12    declaration_list -> method declaration_list
Rule 13    field -> type IDENTIFIER SEMICOLON
Rule 14    method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
Rule 15    params_list -> empty
Rule 16    params_list -> args_list
Rule 17    args_list -> arg
Rule 18    args_list -> arg COMMA args_list
Rule 19    arg -> type IDENTIFIER
Rule 20    var_list -> empty
Rule 21    var_list -> var var_list
Rule 22    var -> type IDENTIFIER SEMICOLON
Rule 23    var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON
Rule 24    statement_list -> empty
Rule 25    statement_list -> statement statement_list
Rule 26    type -> BOOLEAN
Rule 27    type -> INT
Rule 28    type -> IDENTIFIER
Rule 29    type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET
Rule 30    type -> INT LEFT_BRACKET RIGHT_BRACKET
Rule 31    type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
Rule 32    statement -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 33    statement -> if_statement
Rule 34    statement -> while_statement
Rule 35    statement -> print_statement
Rule 36    statement -> assignment_statement
Rule 37    if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 38    if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
Rule 39    while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 40    print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 41    assignment_statement -> expression ASSIGNMENT expression SEMICOLON
Rule 42    expression -> array_element_expression
Rule 43    expression -> length_expression
Rule 44    expression -> call_method_expression
Rule 45    expression -> binary_expression
Rule 46    expression -> parenthesis_expression
Rule 47    expression -> unary_expression
Rule 48    expression -> new_expression
Rule 49    expression -> new_array_expression
Rule 50    expression -> identifier_expression
Rule 51    expression -> integer_literal_expression
Rule 52    expression -> boolean_expression
Rule 53    expression -> this_expression
Rule 54    expression -> null_expression
Rule 55    array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET
Rule 56    length_expression -> expression POINT LENGTH
Rule 57    call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
Rule 58    expression_list -> expression
Rule 59    expression_list -> expression COMMA expression_list
Rule 60    binary_expression -> expression OR expression
Rule 61    binary_expression -> expression AND expression
Rule 62    binary_expression -> expression EQUAL expression
Rule 63    binary_expression -> expression NOT_EQUAL expression
Rule 64    binary_expression -> expression GREATER expression
Rule 65    binary_expression -> expression LESS expression
Rule 66    binary_expression -> expression PLUS expression
Rule 67    binary_expression -> expression MINUS expression
Rule 68    binary_expression -> expression TIMES expression
Rule 69    binary_expression -> expression DIVIDE expression
Rule 70    parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 71    unary_expression -> MINUS expression
Rule 72    unary_expression -> NOT expression
Rule 73    new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 74    new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET
Rule 75    identifier_expression -> IDENTIFIER
Rule 76    integer_literal_expression -> INTEGER_LITERAL
Rule 77    boolean_expression -> TRUE
Rule 78    boolean_expression -> FALSE
Rule 79    this_expression -> THIS
Rule 80    null_expression -> NULL

Terminals, with rules where they appear

AND                  : 61
ASSIGNMENT           : 23 41
BOOLEAN              : 26 29
CLASS                : 5 7
COMMA                : 18 59
DIVIDE               : 69
ELSE                 : 38
EQUAL                : 62
EXTENDS              : 9
FALSE                : 78
GREATER              : 64
IDENTIFIER           : 5 6 7 9 13 14 19 22 23 28 31 57 75
IF                   : 37 38
INT                  : 27 30
INTEGER_LITERAL      : 76
LEFT_BRACE           : 5 6 7 14 32
LEFT_BRACKET         : 6 29 30 31 55 74
LEFT_PARENTHESIS     : 6 14 37 38 39 40 57 70 73
LENGTH               : 56
LESS                 : 65
MAIN                 : 6
MINUS                : 67 71
NEW                  : 73 74
NOT                  : 72
NOT_EQUAL            : 63
NULL                 : 80
OR                   : 60
OUT                  : 40
PLUS                 : 66
POINT                : 40 40 56 57
PRINTLN              : 40
PUBLIC               : 6 14
RETURN               : 14
RIGHT_BRACE          : 5 6 7 14 32
RIGHT_BRACKET        : 6 29 30 31 55 74
RIGHT_PARENTHESIS    : 6 14 37 38 39 40 57 70 73
SEMICOLON            : 13 14 22 23 40 41
STATIC               : 6
STRING               : 6
SYSTEM               : 40
THIS                 : 79
TIMES                : 68
TRUE                 : 77
VOID                 : 6
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

arg                  : 17 18
args_list            : 16 18
array_element_expression : 42
assignment_statement : 36
binary_expression    : 45
boolean_expression   : 52
call_method_expression : 44
class                : 4
class_list           : 1 4
declaration_list     : 7 11 12
empty                : 3 8 10 15 20 24
expression           : 14 23 37 38 39 40 41 41 55 55 56 57 58 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 71 72 74
expression_list      : 57 59
extends              : 7
field                : 11
identifier_expression : 50
if_statement         : 33
integer_literal_expression : 51
length_expression    : 43
main_class           : 1
main_method          : 5
method               : 12
new_array_expression : 49
new_expression       : 48
null_expression      : 54
params_list          : 14
parenthesis_expression : 46
print_statement      : 35
programm             : 0
statement            : 25 37 38 38 39
statement_list       : 6 14 25 32
this_expression      : 53
type                 : 13 14 19 22 23 73 74
unary_expression     : 47
var                  : 21
var_list             : 6 14 21
while_statement      : 34

Parsing method: LALR

state 0

    (0) S' -> . programm
    (1) programm -> . main_class class_list
    (5) main_class -> . CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    CLASS           shift and go to state 3

    main_class                     shift and go to state 1
    programm                       shift and go to state 2

state 1

    (1) programm -> main_class . class_list
    (3) class_list -> . empty
    (4) class_list -> . class class_list
    (2) empty -> .
    (7) class -> . CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    $end            reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 4

    class_list                     shift and go to state 5
    class                          shift and go to state 6
    empty                          shift and go to state 7

state 2

    (0) S' -> programm .



state 3

    (5) main_class -> CLASS . IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE

    IDENTIFIER      shift and go to state 8


state 4

    (7) class -> CLASS . IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 9


state 5

    (1) programm -> main_class class_list .

    $end            reduce using rule 1 (programm -> main_class class_list .)


state 6

    (4) class_list -> class . class_list
    (3) class_list -> . empty
    (4) class_list -> . class class_list
    (2) empty -> .
    (7) class -> . CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE

    $end            reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 4

    class_list                     shift and go to state 10
    class                          shift and go to state 6
    empty                          shift and go to state 7

state 7

    (3) class_list -> empty .

    $end            reduce using rule 3 (class_list -> empty .)


state 8

    (5) main_class -> CLASS IDENTIFIER . LEFT_BRACE main_method RIGHT_BRACE

    LEFT_BRACE      shift and go to state 11


state 9

    (7) class -> CLASS IDENTIFIER . extends LEFT_BRACE declaration_list RIGHT_BRACE
    (8) extends -> . empty
    (9) extends -> . EXTENDS IDENTIFIER
    (2) empty -> .

    EXTENDS         shift and go to state 13
    LEFT_BRACE      reduce using rule 2 (empty -> .)

    extends                        shift and go to state 12
    empty                          shift and go to state 14

state 10

    (4) class_list -> class class_list .

    $end            reduce using rule 4 (class_list -> class class_list .)


state 11

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE . main_method RIGHT_BRACE
    (6) main_method -> . PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    PUBLIC          shift and go to state 16

    main_method                    shift and go to state 15

state 12

    (7) class -> CLASS IDENTIFIER extends . LEFT_BRACE declaration_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 17


state 13

    (9) extends -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 18


state 14

    (8) extends -> empty .

    LEFT_BRACE      reduce using rule 8 (extends -> empty .)


state 15

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 19


state 16

    (6) main_method -> PUBLIC . STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    STATIC          shift and go to state 20


state 17

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE . declaration_list RIGHT_BRACE
    (10) declaration_list -> . empty
    (11) declaration_list -> . field declaration_list
    (12) declaration_list -> . method declaration_list
    (2) empty -> .
    (13) field -> . type IDENTIFIER SEMICOLON
    (14) method -> . PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    PUBLIC          shift and go to state 29
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    declaration_list               shift and go to state 26
    field                          shift and go to state 21
    type                           shift and go to state 23
    method                         shift and go to state 24
    empty                          shift and go to state 28

state 18

    (9) extends -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 9 (extends -> EXTENDS IDENTIFIER .)


state 19

    (5) main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .

    CLASS           reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)
    $end            reduce using rule 5 (main_class -> CLASS IDENTIFIER LEFT_BRACE main_method RIGHT_BRACE .)


state 20

    (6) main_method -> PUBLIC STATIC . VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    VOID            shift and go to state 30


state 21

    (11) declaration_list -> field . declaration_list
    (10) declaration_list -> . empty
    (11) declaration_list -> . field declaration_list
    (12) declaration_list -> . method declaration_list
    (2) empty -> .
    (13) field -> . type IDENTIFIER SEMICOLON
    (14) method -> . PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    PUBLIC          shift and go to state 29
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    declaration_list               shift and go to state 31
    field                          shift and go to state 21
    type                           shift and go to state 23
    method                         shift and go to state 24
    empty                          shift and go to state 28

state 22

    (28) type -> IDENTIFIER .
    (31) type -> IDENTIFIER . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 28 (type -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 28 (type -> IDENTIFIER .)
    LEFT_BRACKET    shift and go to state 32

  ! LEFT_BRACKET    [ reduce using rule 28 (type -> IDENTIFIER .) ]


state 23

    (13) field -> type . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 33


state 24

    (12) declaration_list -> method . declaration_list
    (10) declaration_list -> . empty
    (11) declaration_list -> . field declaration_list
    (12) declaration_list -> . method declaration_list
    (2) empty -> .
    (13) field -> . type IDENTIFIER SEMICOLON
    (14) method -> . PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    PUBLIC          shift and go to state 29
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    declaration_list               shift and go to state 34
    field                          shift and go to state 21
    type                           shift and go to state 23
    method                         shift and go to state 24
    empty                          shift and go to state 28

state 25

    (27) type -> INT .
    (30) type -> INT . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 27 (type -> INT .)
    LEFT_PARENTHESIS reduce using rule 27 (type -> INT .)
    LEFT_BRACKET    shift and go to state 35

  ! LEFT_BRACKET    [ reduce using rule 27 (type -> INT .) ]


state 26

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 36


state 27

    (26) type -> BOOLEAN .
    (29) type -> BOOLEAN . LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    IDENTIFIER      reduce using rule 26 (type -> BOOLEAN .)
    LEFT_PARENTHESIS reduce using rule 26 (type -> BOOLEAN .)
    LEFT_BRACKET    shift and go to state 37

  ! LEFT_BRACKET    [ reduce using rule 26 (type -> BOOLEAN .) ]


state 28

    (10) declaration_list -> empty .

    RIGHT_BRACE     reduce using rule 10 (declaration_list -> empty .)


state 29

    (14) method -> PUBLIC . type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 38

state 30

    (6) main_method -> PUBLIC STATIC VOID . MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    MAIN            shift and go to state 39


state 31

    (11) declaration_list -> field declaration_list .

    RIGHT_BRACE     reduce using rule 11 (declaration_list -> field declaration_list .)


state 32

    (31) type -> IDENTIFIER LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 40


state 33

    (13) field -> type IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 41


state 34

    (12) declaration_list -> method declaration_list .

    RIGHT_BRACE     reduce using rule 12 (declaration_list -> method declaration_list .)


state 35

    (30) type -> INT LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 42


state 36

    (7) class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .

    CLASS           reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)
    $end            reduce using rule 7 (class -> CLASS IDENTIFIER extends LEFT_BRACE declaration_list RIGHT_BRACE .)


state 37

    (29) type -> BOOLEAN LEFT_BRACKET . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 43


state 38

    (14) method -> PUBLIC type . IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    IDENTIFIER      shift and go to state 44


state 39

    (6) main_method -> PUBLIC STATIC VOID MAIN . LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 45


state 40

    (31) type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 31 (type -> IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .)


state 41

    (13) field -> type IDENTIFIER SEMICOLON .

    PUBLIC          reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 13 (field -> type IDENTIFIER SEMICOLON .)


state 42

    (30) type -> INT LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 30 (type -> INT LEFT_BRACKET RIGHT_BRACKET .)


state 43

    (29) type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .

    IDENTIFIER      reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 29 (type -> BOOLEAN LEFT_BRACKET RIGHT_BRACKET .)


state 44

    (14) method -> PUBLIC type IDENTIFIER . LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_PARENTHESIS shift and go to state 46


state 45

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS . STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    STRING          shift and go to state 47


state 46

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS . params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (15) params_list -> . empty
    (16) params_list -> . args_list
    (2) empty -> .
    (17) args_list -> . arg
    (18) args_list -> . arg COMMA args_list
    (19) arg -> . type IDENTIFIER
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    RIGHT_PARENTHESIS reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 51
    args_list                      shift and go to state 49
    arg                            shift and go to state 50
    params_list                    shift and go to state 52
    empty                          shift and go to state 48

state 47

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING . LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_BRACKET    shift and go to state 53


state 48

    (15) params_list -> empty .

    RIGHT_PARENTHESIS reduce using rule 15 (params_list -> empty .)


state 49

    (16) params_list -> args_list .

    RIGHT_PARENTHESIS reduce using rule 16 (params_list -> args_list .)


state 50

    (17) args_list -> arg .
    (18) args_list -> arg . COMMA args_list

    RIGHT_PARENTHESIS reduce using rule 17 (args_list -> arg .)
    COMMA           shift and go to state 54


state 51

    (19) arg -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 55


state 52

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list . RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 56


state 53

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET . RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    RIGHT_BRACKET   shift and go to state 57


state 54

    (18) args_list -> arg COMMA . args_list
    (17) args_list -> . arg
    (18) args_list -> . arg COMMA args_list
    (19) arg -> . type IDENTIFIER
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    args_list                      shift and go to state 58
    type                           shift and go to state 51
    arg                            shift and go to state 50

state 55

    (19) arg -> type IDENTIFIER .

    COMMA           reduce using rule 19 (arg -> type IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 19 (arg -> type IDENTIFIER .)


state 56

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS . LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE

    LEFT_BRACE      shift and go to state 59


state 57

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET . IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    IDENTIFIER      shift and go to state 60


state 58

    (18) args_list -> arg COMMA args_list .

    RIGHT_PARENTHESIS reduce using rule 18 (args_list -> arg COMMA args_list .)


state 59

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE . var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (20) var_list -> . empty
    (21) var_list -> . var var_list
    (2) empty -> .
    (22) var -> . type IDENTIFIER SEMICOLON
    (23) var -> . type IDENTIFIER ASSIGNMENT expression SEMICOLON
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]

    type                           shift and go to state 64
    var                            shift and go to state 62
    var_list                       shift and go to state 61
    empty                          shift and go to state 63

state 60

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER . RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE

    RIGHT_PARENTHESIS shift and go to state 65


state 61

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list . statement_list RETURN expression SEMICOLON RIGHT_BRACE
    (24) statement_list -> . empty
    (25) statement_list -> . statement statement_list
    (2) empty -> .
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    RETURN          reduce using rule 2 (empty -> .)
    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 81
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    empty                          shift and go to state 84
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    statement_list                 shift and go to state 98
    expression                     shift and go to state 99

state 62

    (21) var_list -> var . var_list
    (20) var_list -> . empty
    (21) var_list -> . var var_list
    (2) empty -> .
    (22) var -> . type IDENTIFIER SEMICOLON
    (23) var -> . type IDENTIFIER ASSIGNMENT expression SEMICOLON
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]

    var                            shift and go to state 62
    var_list                       shift and go to state 101
    type                           shift and go to state 64
    empty                          shift and go to state 63

state 63

    (20) var_list -> empty .

    LEFT_BRACE      reduce using rule 20 (var_list -> empty .)
    IF              reduce using rule 20 (var_list -> empty .)
    WHILE           reduce using rule 20 (var_list -> empty .)
    SYSTEM          reduce using rule 20 (var_list -> empty .)
    LEFT_PARENTHESIS reduce using rule 20 (var_list -> empty .)
    MINUS           reduce using rule 20 (var_list -> empty .)
    NOT             reduce using rule 20 (var_list -> empty .)
    NEW             reduce using rule 20 (var_list -> empty .)
    IDENTIFIER      reduce using rule 20 (var_list -> empty .)
    INTEGER_LITERAL reduce using rule 20 (var_list -> empty .)
    TRUE            reduce using rule 20 (var_list -> empty .)
    FALSE           reduce using rule 20 (var_list -> empty .)
    THIS            reduce using rule 20 (var_list -> empty .)
    NULL            reduce using rule 20 (var_list -> empty .)
    RIGHT_BRACE     reduce using rule 20 (var_list -> empty .)
    RETURN          reduce using rule 20 (var_list -> empty .)


state 64

    (22) var -> type . IDENTIFIER SEMICOLON
    (23) var -> type . IDENTIFIER ASSIGNMENT expression SEMICOLON

    IDENTIFIER      shift and go to state 102


state 65

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS . LEFT_BRACE var_list statement_list RIGHT_BRACE

    LEFT_BRACE      shift and go to state 103


state 66

    (47) expression -> unary_expression .

    ASSIGNMENT      reduce using rule 47 (expression -> unary_expression .)
    LEFT_BRACKET    reduce using rule 47 (expression -> unary_expression .)
    POINT           reduce using rule 47 (expression -> unary_expression .)
    OR              reduce using rule 47 (expression -> unary_expression .)
    AND             reduce using rule 47 (expression -> unary_expression .)
    EQUAL           reduce using rule 47 (expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> unary_expression .)
    GREATER         reduce using rule 47 (expression -> unary_expression .)
    LESS            reduce using rule 47 (expression -> unary_expression .)
    PLUS            reduce using rule 47 (expression -> unary_expression .)
    MINUS           reduce using rule 47 (expression -> unary_expression .)
    TIMES           reduce using rule 47 (expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (expression -> unary_expression .)
    SEMICOLON       reduce using rule 47 (expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 47 (expression -> unary_expression .)
    RIGHT_BRACKET   reduce using rule 47 (expression -> unary_expression .)
    COMMA           reduce using rule 47 (expression -> unary_expression .)


state 67

    (50) expression -> identifier_expression .

    ASSIGNMENT      reduce using rule 50 (expression -> identifier_expression .)
    LEFT_BRACKET    reduce using rule 50 (expression -> identifier_expression .)
    POINT           reduce using rule 50 (expression -> identifier_expression .)
    OR              reduce using rule 50 (expression -> identifier_expression .)
    AND             reduce using rule 50 (expression -> identifier_expression .)
    EQUAL           reduce using rule 50 (expression -> identifier_expression .)
    NOT_EQUAL       reduce using rule 50 (expression -> identifier_expression .)
    GREATER         reduce using rule 50 (expression -> identifier_expression .)
    LESS            reduce using rule 50 (expression -> identifier_expression .)
    PLUS            reduce using rule 50 (expression -> identifier_expression .)
    MINUS           reduce using rule 50 (expression -> identifier_expression .)
    TIMES           reduce using rule 50 (expression -> identifier_expression .)
    DIVIDE          reduce using rule 50 (expression -> identifier_expression .)
    SEMICOLON       reduce using rule 50 (expression -> identifier_expression .)
    RIGHT_PARENTHESIS reduce using rule 50 (expression -> identifier_expression .)
    RIGHT_BRACKET   reduce using rule 50 (expression -> identifier_expression .)
    COMMA           reduce using rule 50 (expression -> identifier_expression .)


state 68

    (39) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

    LEFT_PARENTHESIS shift and go to state 104


state 69

    (32) statement -> LEFT_BRACE . statement_list RIGHT_BRACE
    (24) statement_list -> . empty
    (25) statement_list -> . statement statement_list
    (2) empty -> .
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 81
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    empty                          shift and go to state 84
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    statement_list                 shift and go to state 105
    expression                     shift and go to state 99

state 70

    (48) expression -> new_expression .

    ASSIGNMENT      reduce using rule 48 (expression -> new_expression .)
    LEFT_BRACKET    reduce using rule 48 (expression -> new_expression .)
    POINT           reduce using rule 48 (expression -> new_expression .)
    OR              reduce using rule 48 (expression -> new_expression .)
    AND             reduce using rule 48 (expression -> new_expression .)
    EQUAL           reduce using rule 48 (expression -> new_expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> new_expression .)
    GREATER         reduce using rule 48 (expression -> new_expression .)
    LESS            reduce using rule 48 (expression -> new_expression .)
    PLUS            reduce using rule 48 (expression -> new_expression .)
    MINUS           reduce using rule 48 (expression -> new_expression .)
    TIMES           reduce using rule 48 (expression -> new_expression .)
    DIVIDE          reduce using rule 48 (expression -> new_expression .)
    SEMICOLON       reduce using rule 48 (expression -> new_expression .)
    RIGHT_PARENTHESIS reduce using rule 48 (expression -> new_expression .)
    RIGHT_BRACKET   reduce using rule 48 (expression -> new_expression .)
    COMMA           reduce using rule 48 (expression -> new_expression .)


state 71

    (35) statement -> print_statement .

    LEFT_BRACE      reduce using rule 35 (statement -> print_statement .)
    IF              reduce using rule 35 (statement -> print_statement .)
    WHILE           reduce using rule 35 (statement -> print_statement .)
    SYSTEM          reduce using rule 35 (statement -> print_statement .)
    LEFT_PARENTHESIS reduce using rule 35 (statement -> print_statement .)
    MINUS           reduce using rule 35 (statement -> print_statement .)
    NOT             reduce using rule 35 (statement -> print_statement .)
    NEW             reduce using rule 35 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 35 (statement -> print_statement .)
    INTEGER_LITERAL reduce using rule 35 (statement -> print_statement .)
    TRUE            reduce using rule 35 (statement -> print_statement .)
    FALSE           reduce using rule 35 (statement -> print_statement .)
    THIS            reduce using rule 35 (statement -> print_statement .)
    NULL            reduce using rule 35 (statement -> print_statement .)
    RETURN          reduce using rule 35 (statement -> print_statement .)
    RIGHT_BRACE     reduce using rule 35 (statement -> print_statement .)
    ELSE            reduce using rule 35 (statement -> print_statement .)


state 72

    (43) expression -> length_expression .

    ASSIGNMENT      reduce using rule 43 (expression -> length_expression .)
    LEFT_BRACKET    reduce using rule 43 (expression -> length_expression .)
    POINT           reduce using rule 43 (expression -> length_expression .)
    OR              reduce using rule 43 (expression -> length_expression .)
    AND             reduce using rule 43 (expression -> length_expression .)
    EQUAL           reduce using rule 43 (expression -> length_expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> length_expression .)
    GREATER         reduce using rule 43 (expression -> length_expression .)
    LESS            reduce using rule 43 (expression -> length_expression .)
    PLUS            reduce using rule 43 (expression -> length_expression .)
    MINUS           reduce using rule 43 (expression -> length_expression .)
    TIMES           reduce using rule 43 (expression -> length_expression .)
    DIVIDE          reduce using rule 43 (expression -> length_expression .)
    SEMICOLON       reduce using rule 43 (expression -> length_expression .)
    RIGHT_PARENTHESIS reduce using rule 43 (expression -> length_expression .)
    RIGHT_BRACKET   reduce using rule 43 (expression -> length_expression .)
    COMMA           reduce using rule 43 (expression -> length_expression .)


state 73

    (80) null_expression -> NULL .

    COMMA           reduce using rule 80 (null_expression -> NULL .)
    LEFT_BRACKET    reduce using rule 80 (null_expression -> NULL .)
    POINT           reduce using rule 80 (null_expression -> NULL .)
    OR              reduce using rule 80 (null_expression -> NULL .)
    AND             reduce using rule 80 (null_expression -> NULL .)
    EQUAL           reduce using rule 80 (null_expression -> NULL .)
    NOT_EQUAL       reduce using rule 80 (null_expression -> NULL .)
    GREATER         reduce using rule 80 (null_expression -> NULL .)
    LESS            reduce using rule 80 (null_expression -> NULL .)
    PLUS            reduce using rule 80 (null_expression -> NULL .)
    MINUS           reduce using rule 80 (null_expression -> NULL .)
    TIMES           reduce using rule 80 (null_expression -> NULL .)
    DIVIDE          reduce using rule 80 (null_expression -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 80 (null_expression -> NULL .)
    ASSIGNMENT      reduce using rule 80 (null_expression -> NULL .)
    SEMICOLON       reduce using rule 80 (null_expression -> NULL .)
    RIGHT_BRACKET   reduce using rule 80 (null_expression -> NULL .)


state 74

    (77) boolean_expression -> TRUE .

    RIGHT_BRACKET   reduce using rule 77 (boolean_expression -> TRUE .)
    LEFT_BRACKET    reduce using rule 77 (boolean_expression -> TRUE .)
    POINT           reduce using rule 77 (boolean_expression -> TRUE .)
    OR              reduce using rule 77 (boolean_expression -> TRUE .)
    AND             reduce using rule 77 (boolean_expression -> TRUE .)
    EQUAL           reduce using rule 77 (boolean_expression -> TRUE .)
    NOT_EQUAL       reduce using rule 77 (boolean_expression -> TRUE .)
    GREATER         reduce using rule 77 (boolean_expression -> TRUE .)
    LESS            reduce using rule 77 (boolean_expression -> TRUE .)
    PLUS            reduce using rule 77 (boolean_expression -> TRUE .)
    MINUS           reduce using rule 77 (boolean_expression -> TRUE .)
    TIMES           reduce using rule 77 (boolean_expression -> TRUE .)
    DIVIDE          reduce using rule 77 (boolean_expression -> TRUE .)
    ASSIGNMENT      reduce using rule 77 (boolean_expression -> TRUE .)
    RIGHT_PARENTHESIS reduce using rule 77 (boolean_expression -> TRUE .)
    SEMICOLON       reduce using rule 77 (boolean_expression -> TRUE .)
    COMMA           reduce using rule 77 (boolean_expression -> TRUE .)


state 75

    (71) unary_expression -> MINUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 106
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 76

    (46) expression -> parenthesis_expression .

    ASSIGNMENT      reduce using rule 46 (expression -> parenthesis_expression .)
    LEFT_BRACKET    reduce using rule 46 (expression -> parenthesis_expression .)
    POINT           reduce using rule 46 (expression -> parenthesis_expression .)
    OR              reduce using rule 46 (expression -> parenthesis_expression .)
    AND             reduce using rule 46 (expression -> parenthesis_expression .)
    EQUAL           reduce using rule 46 (expression -> parenthesis_expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> parenthesis_expression .)
    GREATER         reduce using rule 46 (expression -> parenthesis_expression .)
    LESS            reduce using rule 46 (expression -> parenthesis_expression .)
    PLUS            reduce using rule 46 (expression -> parenthesis_expression .)
    MINUS           reduce using rule 46 (expression -> parenthesis_expression .)
    TIMES           reduce using rule 46 (expression -> parenthesis_expression .)
    DIVIDE          reduce using rule 46 (expression -> parenthesis_expression .)
    SEMICOLON       reduce using rule 46 (expression -> parenthesis_expression .)
    RIGHT_PARENTHESIS reduce using rule 46 (expression -> parenthesis_expression .)
    RIGHT_BRACKET   reduce using rule 46 (expression -> parenthesis_expression .)
    COMMA           reduce using rule 46 (expression -> parenthesis_expression .)


state 77

    (73) new_expression -> NEW . type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> NEW . type LEFT_BRACKET expression RIGHT_BRACKET
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 107

state 78

    (36) statement -> assignment_statement .

    LEFT_BRACE      reduce using rule 36 (statement -> assignment_statement .)
    IF              reduce using rule 36 (statement -> assignment_statement .)
    WHILE           reduce using rule 36 (statement -> assignment_statement .)
    SYSTEM          reduce using rule 36 (statement -> assignment_statement .)
    LEFT_PARENTHESIS reduce using rule 36 (statement -> assignment_statement .)
    MINUS           reduce using rule 36 (statement -> assignment_statement .)
    NOT             reduce using rule 36 (statement -> assignment_statement .)
    NEW             reduce using rule 36 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 36 (statement -> assignment_statement .)
    INTEGER_LITERAL reduce using rule 36 (statement -> assignment_statement .)
    TRUE            reduce using rule 36 (statement -> assignment_statement .)
    FALSE           reduce using rule 36 (statement -> assignment_statement .)
    THIS            reduce using rule 36 (statement -> assignment_statement .)
    NULL            reduce using rule 36 (statement -> assignment_statement .)
    RETURN          reduce using rule 36 (statement -> assignment_statement .)
    RIGHT_BRACE     reduce using rule 36 (statement -> assignment_statement .)
    ELSE            reduce using rule 36 (statement -> assignment_statement .)


state 79

    (42) expression -> array_element_expression .

    ASSIGNMENT      reduce using rule 42 (expression -> array_element_expression .)
    LEFT_BRACKET    reduce using rule 42 (expression -> array_element_expression .)
    POINT           reduce using rule 42 (expression -> array_element_expression .)
    OR              reduce using rule 42 (expression -> array_element_expression .)
    AND             reduce using rule 42 (expression -> array_element_expression .)
    EQUAL           reduce using rule 42 (expression -> array_element_expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> array_element_expression .)
    GREATER         reduce using rule 42 (expression -> array_element_expression .)
    LESS            reduce using rule 42 (expression -> array_element_expression .)
    PLUS            reduce using rule 42 (expression -> array_element_expression .)
    MINUS           reduce using rule 42 (expression -> array_element_expression .)
    TIMES           reduce using rule 42 (expression -> array_element_expression .)
    DIVIDE          reduce using rule 42 (expression -> array_element_expression .)
    SEMICOLON       reduce using rule 42 (expression -> array_element_expression .)
    RIGHT_PARENTHESIS reduce using rule 42 (expression -> array_element_expression .)
    RIGHT_BRACKET   reduce using rule 42 (expression -> array_element_expression .)
    COMMA           reduce using rule 42 (expression -> array_element_expression .)


state 80

    (34) statement -> while_statement .

    LEFT_BRACE      reduce using rule 34 (statement -> while_statement .)
    IF              reduce using rule 34 (statement -> while_statement .)
    WHILE           reduce using rule 34 (statement -> while_statement .)
    SYSTEM          reduce using rule 34 (statement -> while_statement .)
    LEFT_PARENTHESIS reduce using rule 34 (statement -> while_statement .)
    MINUS           reduce using rule 34 (statement -> while_statement .)
    NOT             reduce using rule 34 (statement -> while_statement .)
    NEW             reduce using rule 34 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 34 (statement -> while_statement .)
    INTEGER_LITERAL reduce using rule 34 (statement -> while_statement .)
    TRUE            reduce using rule 34 (statement -> while_statement .)
    FALSE           reduce using rule 34 (statement -> while_statement .)
    THIS            reduce using rule 34 (statement -> while_statement .)
    NULL            reduce using rule 34 (statement -> while_statement .)
    RETURN          reduce using rule 34 (statement -> while_statement .)
    RIGHT_BRACE     reduce using rule 34 (statement -> while_statement .)
    ELSE            reduce using rule 34 (statement -> while_statement .)


state 81

    (25) statement_list -> statement . statement_list
    (24) statement_list -> . empty
    (25) statement_list -> . statement statement_list
    (2) empty -> .
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    RETURN          reduce using rule 2 (empty -> .)
    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 81
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    empty                          shift and go to state 84
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    statement_list                 shift and go to state 108
    expression                     shift and go to state 99

state 82

    (33) statement -> if_statement .

    LEFT_BRACE      reduce using rule 33 (statement -> if_statement .)
    IF              reduce using rule 33 (statement -> if_statement .)
    WHILE           reduce using rule 33 (statement -> if_statement .)
    SYSTEM          reduce using rule 33 (statement -> if_statement .)
    LEFT_PARENTHESIS reduce using rule 33 (statement -> if_statement .)
    MINUS           reduce using rule 33 (statement -> if_statement .)
    NOT             reduce using rule 33 (statement -> if_statement .)
    NEW             reduce using rule 33 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 33 (statement -> if_statement .)
    INTEGER_LITERAL reduce using rule 33 (statement -> if_statement .)
    TRUE            reduce using rule 33 (statement -> if_statement .)
    FALSE           reduce using rule 33 (statement -> if_statement .)
    THIS            reduce using rule 33 (statement -> if_statement .)
    NULL            reduce using rule 33 (statement -> if_statement .)
    RETURN          reduce using rule 33 (statement -> if_statement .)
    RIGHT_BRACE     reduce using rule 33 (statement -> if_statement .)
    ELSE            reduce using rule 33 (statement -> if_statement .)


state 83

    (49) expression -> new_array_expression .

    ASSIGNMENT      reduce using rule 49 (expression -> new_array_expression .)
    LEFT_BRACKET    reduce using rule 49 (expression -> new_array_expression .)
    POINT           reduce using rule 49 (expression -> new_array_expression .)
    OR              reduce using rule 49 (expression -> new_array_expression .)
    AND             reduce using rule 49 (expression -> new_array_expression .)
    EQUAL           reduce using rule 49 (expression -> new_array_expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> new_array_expression .)
    GREATER         reduce using rule 49 (expression -> new_array_expression .)
    LESS            reduce using rule 49 (expression -> new_array_expression .)
    PLUS            reduce using rule 49 (expression -> new_array_expression .)
    MINUS           reduce using rule 49 (expression -> new_array_expression .)
    TIMES           reduce using rule 49 (expression -> new_array_expression .)
    DIVIDE          reduce using rule 49 (expression -> new_array_expression .)
    SEMICOLON       reduce using rule 49 (expression -> new_array_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (expression -> new_array_expression .)
    RIGHT_BRACKET   reduce using rule 49 (expression -> new_array_expression .)
    COMMA           reduce using rule 49 (expression -> new_array_expression .)


state 84

    (24) statement_list -> empty .

    RETURN          reduce using rule 24 (statement_list -> empty .)
    RIGHT_BRACE     reduce using rule 24 (statement_list -> empty .)


state 85

    (53) expression -> this_expression .

    ASSIGNMENT      reduce using rule 53 (expression -> this_expression .)
    LEFT_BRACKET    reduce using rule 53 (expression -> this_expression .)
    POINT           reduce using rule 53 (expression -> this_expression .)
    OR              reduce using rule 53 (expression -> this_expression .)
    AND             reduce using rule 53 (expression -> this_expression .)
    EQUAL           reduce using rule 53 (expression -> this_expression .)
    NOT_EQUAL       reduce using rule 53 (expression -> this_expression .)
    GREATER         reduce using rule 53 (expression -> this_expression .)
    LESS            reduce using rule 53 (expression -> this_expression .)
    PLUS            reduce using rule 53 (expression -> this_expression .)
    MINUS           reduce using rule 53 (expression -> this_expression .)
    TIMES           reduce using rule 53 (expression -> this_expression .)
    DIVIDE          reduce using rule 53 (expression -> this_expression .)
    SEMICOLON       reduce using rule 53 (expression -> this_expression .)
    RIGHT_PARENTHESIS reduce using rule 53 (expression -> this_expression .)
    RIGHT_BRACKET   reduce using rule 53 (expression -> this_expression .)
    COMMA           reduce using rule 53 (expression -> this_expression .)


state 86

    (54) expression -> null_expression .

    ASSIGNMENT      reduce using rule 54 (expression -> null_expression .)
    LEFT_BRACKET    reduce using rule 54 (expression -> null_expression .)
    POINT           reduce using rule 54 (expression -> null_expression .)
    OR              reduce using rule 54 (expression -> null_expression .)
    AND             reduce using rule 54 (expression -> null_expression .)
    EQUAL           reduce using rule 54 (expression -> null_expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> null_expression .)
    GREATER         reduce using rule 54 (expression -> null_expression .)
    LESS            reduce using rule 54 (expression -> null_expression .)
    PLUS            reduce using rule 54 (expression -> null_expression .)
    MINUS           reduce using rule 54 (expression -> null_expression .)
    TIMES           reduce using rule 54 (expression -> null_expression .)
    DIVIDE          reduce using rule 54 (expression -> null_expression .)
    SEMICOLON       reduce using rule 54 (expression -> null_expression .)
    RIGHT_PARENTHESIS reduce using rule 54 (expression -> null_expression .)
    RIGHT_BRACKET   reduce using rule 54 (expression -> null_expression .)
    COMMA           reduce using rule 54 (expression -> null_expression .)


state 87

    (76) integer_literal_expression -> INTEGER_LITERAL .

    LEFT_BRACKET    reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    POINT           reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    OR              reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    AND             reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    GREATER         reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    LESS            reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    TIMES           reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    ASSIGNMENT      reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    SEMICOLON       reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    RIGHT_BRACKET   reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 76 (integer_literal_expression -> INTEGER_LITERAL .)


state 88

    (72) unary_expression -> NOT . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 109
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 89

    (37) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement

    LEFT_PARENTHESIS shift and go to state 110


state 90

    (75) identifier_expression -> IDENTIFIER .

    RIGHT_BRACKET   reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    POINT           reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    OR              reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    AND             reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    EQUAL           reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    GREATER         reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    LESS            reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    PLUS            reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    MINUS           reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    TIMES           reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 75 (identifier_expression -> IDENTIFIER .)
    COMMA           reduce using rule 75 (identifier_expression -> IDENTIFIER .)


state 91

    (78) boolean_expression -> FALSE .

    RIGHT_BRACKET   reduce using rule 78 (boolean_expression -> FALSE .)
    LEFT_BRACKET    reduce using rule 78 (boolean_expression -> FALSE .)
    POINT           reduce using rule 78 (boolean_expression -> FALSE .)
    OR              reduce using rule 78 (boolean_expression -> FALSE .)
    AND             reduce using rule 78 (boolean_expression -> FALSE .)
    EQUAL           reduce using rule 78 (boolean_expression -> FALSE .)
    NOT_EQUAL       reduce using rule 78 (boolean_expression -> FALSE .)
    GREATER         reduce using rule 78 (boolean_expression -> FALSE .)
    LESS            reduce using rule 78 (boolean_expression -> FALSE .)
    PLUS            reduce using rule 78 (boolean_expression -> FALSE .)
    MINUS           reduce using rule 78 (boolean_expression -> FALSE .)
    TIMES           reduce using rule 78 (boolean_expression -> FALSE .)
    DIVIDE          reduce using rule 78 (boolean_expression -> FALSE .)
    ASSIGNMENT      reduce using rule 78 (boolean_expression -> FALSE .)
    RIGHT_PARENTHESIS reduce using rule 78 (boolean_expression -> FALSE .)
    SEMICOLON       reduce using rule 78 (boolean_expression -> FALSE .)
    COMMA           reduce using rule 78 (boolean_expression -> FALSE .)


state 92

    (45) expression -> binary_expression .

    ASSIGNMENT      reduce using rule 45 (expression -> binary_expression .)
    LEFT_BRACKET    reduce using rule 45 (expression -> binary_expression .)
    POINT           reduce using rule 45 (expression -> binary_expression .)
    OR              reduce using rule 45 (expression -> binary_expression .)
    AND             reduce using rule 45 (expression -> binary_expression .)
    EQUAL           reduce using rule 45 (expression -> binary_expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> binary_expression .)
    GREATER         reduce using rule 45 (expression -> binary_expression .)
    LESS            reduce using rule 45 (expression -> binary_expression .)
    PLUS            reduce using rule 45 (expression -> binary_expression .)
    MINUS           reduce using rule 45 (expression -> binary_expression .)
    TIMES           reduce using rule 45 (expression -> binary_expression .)
    DIVIDE          reduce using rule 45 (expression -> binary_expression .)
    SEMICOLON       reduce using rule 45 (expression -> binary_expression .)
    RIGHT_PARENTHESIS reduce using rule 45 (expression -> binary_expression .)
    RIGHT_BRACKET   reduce using rule 45 (expression -> binary_expression .)
    COMMA           reduce using rule 45 (expression -> binary_expression .)


state 93

    (52) expression -> boolean_expression .

    ASSIGNMENT      reduce using rule 52 (expression -> boolean_expression .)
    LEFT_BRACKET    reduce using rule 52 (expression -> boolean_expression .)
    POINT           reduce using rule 52 (expression -> boolean_expression .)
    OR              reduce using rule 52 (expression -> boolean_expression .)
    AND             reduce using rule 52 (expression -> boolean_expression .)
    EQUAL           reduce using rule 52 (expression -> boolean_expression .)
    NOT_EQUAL       reduce using rule 52 (expression -> boolean_expression .)
    GREATER         reduce using rule 52 (expression -> boolean_expression .)
    LESS            reduce using rule 52 (expression -> boolean_expression .)
    PLUS            reduce using rule 52 (expression -> boolean_expression .)
    MINUS           reduce using rule 52 (expression -> boolean_expression .)
    TIMES           reduce using rule 52 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 52 (expression -> boolean_expression .)
    SEMICOLON       reduce using rule 52 (expression -> boolean_expression .)
    RIGHT_PARENTHESIS reduce using rule 52 (expression -> boolean_expression .)
    RIGHT_BRACKET   reduce using rule 52 (expression -> boolean_expression .)
    COMMA           reduce using rule 52 (expression -> boolean_expression .)


state 94

    (79) this_expression -> THIS .

    ASSIGNMENT      reduce using rule 79 (this_expression -> THIS .)
    LEFT_BRACKET    reduce using rule 79 (this_expression -> THIS .)
    POINT           reduce using rule 79 (this_expression -> THIS .)
    OR              reduce using rule 79 (this_expression -> THIS .)
    AND             reduce using rule 79 (this_expression -> THIS .)
    EQUAL           reduce using rule 79 (this_expression -> THIS .)
    NOT_EQUAL       reduce using rule 79 (this_expression -> THIS .)
    GREATER         reduce using rule 79 (this_expression -> THIS .)
    LESS            reduce using rule 79 (this_expression -> THIS .)
    PLUS            reduce using rule 79 (this_expression -> THIS .)
    MINUS           reduce using rule 79 (this_expression -> THIS .)
    TIMES           reduce using rule 79 (this_expression -> THIS .)
    DIVIDE          reduce using rule 79 (this_expression -> THIS .)
    RIGHT_PARENTHESIS reduce using rule 79 (this_expression -> THIS .)
    SEMICOLON       reduce using rule 79 (this_expression -> THIS .)
    RIGHT_BRACKET   reduce using rule 79 (this_expression -> THIS .)
    COMMA           reduce using rule 79 (this_expression -> THIS .)


state 95

    (44) expression -> call_method_expression .

    ASSIGNMENT      reduce using rule 44 (expression -> call_method_expression .)
    LEFT_BRACKET    reduce using rule 44 (expression -> call_method_expression .)
    POINT           reduce using rule 44 (expression -> call_method_expression .)
    OR              reduce using rule 44 (expression -> call_method_expression .)
    AND             reduce using rule 44 (expression -> call_method_expression .)
    EQUAL           reduce using rule 44 (expression -> call_method_expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> call_method_expression .)
    GREATER         reduce using rule 44 (expression -> call_method_expression .)
    LESS            reduce using rule 44 (expression -> call_method_expression .)
    PLUS            reduce using rule 44 (expression -> call_method_expression .)
    MINUS           reduce using rule 44 (expression -> call_method_expression .)
    TIMES           reduce using rule 44 (expression -> call_method_expression .)
    DIVIDE          reduce using rule 44 (expression -> call_method_expression .)
    SEMICOLON       reduce using rule 44 (expression -> call_method_expression .)
    RIGHT_PARENTHESIS reduce using rule 44 (expression -> call_method_expression .)
    RIGHT_BRACKET   reduce using rule 44 (expression -> call_method_expression .)
    COMMA           reduce using rule 44 (expression -> call_method_expression .)


state 96

    (40) print_statement -> SYSTEM . POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 111


state 97

    (70) parenthesis_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 112
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 98

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list . RETURN expression SEMICOLON RIGHT_BRACE

    RETURN          shift and go to state 113


state 99

    (41) assignment_statement -> expression . ASSIGNMENT expression SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    ASSIGNMENT      shift and go to state 119
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 100

    (51) expression -> integer_literal_expression .

    ASSIGNMENT      reduce using rule 51 (expression -> integer_literal_expression .)
    LEFT_BRACKET    reduce using rule 51 (expression -> integer_literal_expression .)
    POINT           reduce using rule 51 (expression -> integer_literal_expression .)
    OR              reduce using rule 51 (expression -> integer_literal_expression .)
    AND             reduce using rule 51 (expression -> integer_literal_expression .)
    EQUAL           reduce using rule 51 (expression -> integer_literal_expression .)
    NOT_EQUAL       reduce using rule 51 (expression -> integer_literal_expression .)
    GREATER         reduce using rule 51 (expression -> integer_literal_expression .)
    LESS            reduce using rule 51 (expression -> integer_literal_expression .)
    PLUS            reduce using rule 51 (expression -> integer_literal_expression .)
    MINUS           reduce using rule 51 (expression -> integer_literal_expression .)
    TIMES           reduce using rule 51 (expression -> integer_literal_expression .)
    DIVIDE          reduce using rule 51 (expression -> integer_literal_expression .)
    SEMICOLON       reduce using rule 51 (expression -> integer_literal_expression .)
    RIGHT_PARENTHESIS reduce using rule 51 (expression -> integer_literal_expression .)
    RIGHT_BRACKET   reduce using rule 51 (expression -> integer_literal_expression .)
    COMMA           reduce using rule 51 (expression -> integer_literal_expression .)


state 101

    (21) var_list -> var var_list .

    LEFT_BRACE      reduce using rule 21 (var_list -> var var_list .)
    IF              reduce using rule 21 (var_list -> var var_list .)
    WHILE           reduce using rule 21 (var_list -> var var_list .)
    SYSTEM          reduce using rule 21 (var_list -> var var_list .)
    LEFT_PARENTHESIS reduce using rule 21 (var_list -> var var_list .)
    MINUS           reduce using rule 21 (var_list -> var var_list .)
    NOT             reduce using rule 21 (var_list -> var var_list .)
    NEW             reduce using rule 21 (var_list -> var var_list .)
    IDENTIFIER      reduce using rule 21 (var_list -> var var_list .)
    INTEGER_LITERAL reduce using rule 21 (var_list -> var var_list .)
    TRUE            reduce using rule 21 (var_list -> var var_list .)
    FALSE           reduce using rule 21 (var_list -> var var_list .)
    THIS            reduce using rule 21 (var_list -> var var_list .)
    NULL            reduce using rule 21 (var_list -> var var_list .)
    RIGHT_BRACE     reduce using rule 21 (var_list -> var var_list .)
    RETURN          reduce using rule 21 (var_list -> var var_list .)


state 102

    (22) var -> type IDENTIFIER . SEMICOLON
    (23) var -> type IDENTIFIER . ASSIGNMENT expression SEMICOLON

    SEMICOLON       shift and go to state 128
    ASSIGNMENT      shift and go to state 127


state 103

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE . var_list statement_list RIGHT_BRACE
    (20) var_list -> . empty
    (21) var_list -> . var var_list
    (2) empty -> .
    (22) var -> . type IDENTIFIER SEMICOLON
    (23) var -> . type IDENTIFIER ASSIGNMENT expression SEMICOLON
    (26) type -> . BOOLEAN
    (27) type -> . INT
    (28) type -> . IDENTIFIER
    (29) type -> . BOOLEAN LEFT_BRACKET RIGHT_BRACKET
    (30) type -> . INT LEFT_BRACKET RIGHT_BRACKET
    (31) type -> . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LEFT_BRACE      reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    SYSTEM          reduce using rule 2 (empty -> .)
    LEFT_PARENTHESIS reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    NOT             reduce using rule 2 (empty -> .)
    NEW             reduce using rule 2 (empty -> .)
    INTEGER_LITERAL reduce using rule 2 (empty -> .)
    TRUE            reduce using rule 2 (empty -> .)
    FALSE           reduce using rule 2 (empty -> .)
    THIS            reduce using rule 2 (empty -> .)
    NULL            reduce using rule 2 (empty -> .)
    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    BOOLEAN         shift and go to state 27
    INT             shift and go to state 25
    IDENTIFIER      shift and go to state 22

  ! IDENTIFIER      [ reduce using rule 2 (empty -> .) ]

    var                            shift and go to state 62
    var_list                       shift and go to state 129
    type                           shift and go to state 64
    empty                          shift and go to state 63

state 104

    (39) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 130
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 105

    (32) statement -> LEFT_BRACE statement_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 131


state 106

    (71) unary_expression -> MINUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 71 (unary_expression -> MINUS expression .)
    LEFT_BRACKET    reduce using rule 71 (unary_expression -> MINUS expression .)
    OR              reduce using rule 71 (unary_expression -> MINUS expression .)
    AND             reduce using rule 71 (unary_expression -> MINUS expression .)
    EQUAL           reduce using rule 71 (unary_expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 71 (unary_expression -> MINUS expression .)
    GREATER         reduce using rule 71 (unary_expression -> MINUS expression .)
    LESS            reduce using rule 71 (unary_expression -> MINUS expression .)
    PLUS            reduce using rule 71 (unary_expression -> MINUS expression .)
    MINUS           reduce using rule 71 (unary_expression -> MINUS expression .)
    TIMES           reduce using rule 71 (unary_expression -> MINUS expression .)
    DIVIDE          reduce using rule 71 (unary_expression -> MINUS expression .)
    ASSIGNMENT      reduce using rule 71 (unary_expression -> MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 71 (unary_expression -> MINUS expression .)
    RIGHT_BRACKET   reduce using rule 71 (unary_expression -> MINUS expression .)
    COMMA           reduce using rule 71 (unary_expression -> MINUS expression .)
    POINT           shift and go to state 118

  ! POINT           [ reduce using rule 71 (unary_expression -> MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 115 ]
  ! DIVIDE          [ shift and go to state 126 ]


state 107

    (73) new_expression -> NEW type . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> NEW type . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_PARENTHESIS shift and go to state 133
    LEFT_BRACKET    shift and go to state 132


state 108

    (25) statement_list -> statement statement_list .

    RETURN          reduce using rule 25 (statement_list -> statement statement_list .)
    RIGHT_BRACE     reduce using rule 25 (statement_list -> statement statement_list .)


state 109

    (72) unary_expression -> NOT expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 72 (unary_expression -> NOT expression .)
    LEFT_BRACKET    reduce using rule 72 (unary_expression -> NOT expression .)
    OR              reduce using rule 72 (unary_expression -> NOT expression .)
    AND             reduce using rule 72 (unary_expression -> NOT expression .)
    EQUAL           reduce using rule 72 (unary_expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 72 (unary_expression -> NOT expression .)
    GREATER         reduce using rule 72 (unary_expression -> NOT expression .)
    LESS            reduce using rule 72 (unary_expression -> NOT expression .)
    PLUS            reduce using rule 72 (unary_expression -> NOT expression .)
    MINUS           reduce using rule 72 (unary_expression -> NOT expression .)
    TIMES           reduce using rule 72 (unary_expression -> NOT expression .)
    DIVIDE          reduce using rule 72 (unary_expression -> NOT expression .)
    ASSIGNMENT      reduce using rule 72 (unary_expression -> NOT expression .)
    RIGHT_PARENTHESIS reduce using rule 72 (unary_expression -> NOT expression .)
    RIGHT_BRACKET   reduce using rule 72 (unary_expression -> NOT expression .)
    COMMA           reduce using rule 72 (unary_expression -> NOT expression .)
    POINT           shift and go to state 118

  ! POINT           [ reduce using rule 72 (unary_expression -> NOT expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 115 ]
  ! DIVIDE          [ shift and go to state 126 ]


state 110

    (37) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (38) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement ELSE statement
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 134
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 111

    (40) print_statement -> SYSTEM POINT . OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    OUT             shift and go to state 135


state 112

    (70) parenthesis_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 136
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 113

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN . expression SEMICOLON RIGHT_BRACE
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    integer_literal_expression     shift and go to state 100
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    new_array_expression           shift and go to state 83
    new_expression                 shift and go to state 70
    expression                     shift and go to state 137
    call_method_expression         shift and go to state 95

state 114

    (61) binary_expression -> expression AND . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 138
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 115

    (68) binary_expression -> expression TIMES . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 139
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 116

    (63) binary_expression -> expression NOT_EQUAL . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 140
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 117

    (64) binary_expression -> expression GREATER . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 141
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 118

    (56) length_expression -> expression POINT . LENGTH
    (57) call_method_expression -> expression POINT . IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    LENGTH          shift and go to state 142
    IDENTIFIER      shift and go to state 143


state 119

    (41) assignment_statement -> expression ASSIGNMENT . expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 144
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 120

    (65) binary_expression -> expression LESS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 145
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 121

    (62) binary_expression -> expression EQUAL . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 146
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 122

    (60) binary_expression -> expression OR . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 147
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 123

    (66) binary_expression -> expression PLUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 148
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 124

    (67) binary_expression -> expression MINUS . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 149
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 125

    (55) array_element_expression -> expression LEFT_BRACKET . expression RIGHT_BRACKET
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 150
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 126

    (69) binary_expression -> expression DIVIDE . expression
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 151
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 127

    (23) var -> type IDENTIFIER ASSIGNMENT . expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 152
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 128

    (22) var -> type IDENTIFIER SEMICOLON .

    BOOLEAN         reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    LEFT_BRACE      reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    SYSTEM          reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    INTEGER_LITERAL reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (var -> type IDENTIFIER SEMICOLON .)


state 129

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list . statement_list RIGHT_BRACE
    (24) statement_list -> . empty
    (25) statement_list -> . statement statement_list
    (2) empty -> .
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    RIGHT_BRACE     reduce using rule 2 (empty -> .)
    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 81
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    empty                          shift and go to state 84
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    statement_list                 shift and go to state 153
    expression                     shift and go to state 99

state 130

    (39) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 154
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 131

    (32) statement -> LEFT_BRACE statement_list RIGHT_BRACE .

    LEFT_BRACE      reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    IF              reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    WHILE           reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    SYSTEM          reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    LEFT_PARENTHESIS reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    MINUS           reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NOT             reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NEW             reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    INTEGER_LITERAL reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    TRUE            reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    FALSE           reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    THIS            reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    NULL            reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    RETURN          reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)
    ELSE            reduce using rule 32 (statement -> LEFT_BRACE statement_list RIGHT_BRACE .)


state 132

    (74) new_array_expression -> NEW type LEFT_BRACKET . expression RIGHT_BRACKET
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 155
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 133

    (73) new_expression -> NEW type LEFT_PARENTHESIS . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 156


state 134

    (37) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (38) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement ELSE statement
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 157
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 135

    (40) print_statement -> SYSTEM POINT OUT . POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    POINT           shift and go to state 158


state 136

    (70) parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    POINT           reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASSIGNMENT      reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 70 (parenthesis_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 137

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression . SEMICOLON RIGHT_BRACE
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 159
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 138

    (61) binary_expression -> expression AND expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 61 (binary_expression -> expression AND expression .)
    LEFT_BRACKET    reduce using rule 61 (binary_expression -> expression AND expression .)
    OR              reduce using rule 61 (binary_expression -> expression AND expression .)
    AND             reduce using rule 61 (binary_expression -> expression AND expression .)
    SEMICOLON       reduce using rule 61 (binary_expression -> expression AND expression .)
    ASSIGNMENT      reduce using rule 61 (binary_expression -> expression AND expression .)
    RIGHT_BRACKET   reduce using rule 61 (binary_expression -> expression AND expression .)
    COMMA           reduce using rule 61 (binary_expression -> expression AND expression .)
    POINT           shift and go to state 118
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 61 (binary_expression -> expression AND expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]


state 139

    (68) binary_expression -> expression TIMES expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 68 (binary_expression -> expression TIMES expression .)
    LEFT_BRACKET    reduce using rule 68 (binary_expression -> expression TIMES expression .)
    OR              reduce using rule 68 (binary_expression -> expression TIMES expression .)
    AND             reduce using rule 68 (binary_expression -> expression TIMES expression .)
    EQUAL           reduce using rule 68 (binary_expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 68 (binary_expression -> expression TIMES expression .)
    GREATER         reduce using rule 68 (binary_expression -> expression TIMES expression .)
    LESS            reduce using rule 68 (binary_expression -> expression TIMES expression .)
    PLUS            reduce using rule 68 (binary_expression -> expression TIMES expression .)
    MINUS           reduce using rule 68 (binary_expression -> expression TIMES expression .)
    TIMES           reduce using rule 68 (binary_expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 68 (binary_expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 68 (binary_expression -> expression TIMES expression .)
    ASSIGNMENT      reduce using rule 68 (binary_expression -> expression TIMES expression .)
    RIGHT_BRACKET   reduce using rule 68 (binary_expression -> expression TIMES expression .)
    COMMA           reduce using rule 68 (binary_expression -> expression TIMES expression .)
    POINT           shift and go to state 118

  ! POINT           [ reduce using rule 68 (binary_expression -> expression TIMES expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 115 ]
  ! DIVIDE          [ shift and go to state 126 ]


state 140

    (63) binary_expression -> expression NOT_EQUAL expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    LEFT_BRACKET    reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    GREATER         reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    LESS            reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    ASSIGNMENT      reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .)
    POINT           shift and go to state 118
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! PLUS            [ reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 63 (binary_expression -> expression NOT_EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]


state 141

    (64) binary_expression -> expression GREATER expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 64 (binary_expression -> expression GREATER expression .)
    LEFT_BRACKET    reduce using rule 64 (binary_expression -> expression GREATER expression .)
    OR              reduce using rule 64 (binary_expression -> expression GREATER expression .)
    AND             reduce using rule 64 (binary_expression -> expression GREATER expression .)
    EQUAL           reduce using rule 64 (binary_expression -> expression GREATER expression .)
    NOT_EQUAL       reduce using rule 64 (binary_expression -> expression GREATER expression .)
    GREATER         reduce using rule 64 (binary_expression -> expression GREATER expression .)
    LESS            reduce using rule 64 (binary_expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 64 (binary_expression -> expression GREATER expression .)
    ASSIGNMENT      reduce using rule 64 (binary_expression -> expression GREATER expression .)
    RIGHT_BRACKET   reduce using rule 64 (binary_expression -> expression GREATER expression .)
    COMMA           reduce using rule 64 (binary_expression -> expression GREATER expression .)
    POINT           shift and go to state 118
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 64 (binary_expression -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 64 (binary_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 64 (binary_expression -> expression GREATER expression .) ]
  ! TIMES           [ reduce using rule 64 (binary_expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 64 (binary_expression -> expression GREATER expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]


state 142

    (56) length_expression -> expression POINT LENGTH .

    ASSIGNMENT      reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    LEFT_BRACKET    reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    POINT           reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    OR              reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    AND             reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    EQUAL           reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    NOT_EQUAL       reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    GREATER         reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    LESS            reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    PLUS            reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    MINUS           reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    TIMES           reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    DIVIDE          reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    RIGHT_PARENTHESIS reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    SEMICOLON       reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    RIGHT_BRACKET   reduce using rule 56 (length_expression -> expression POINT LENGTH .)
    COMMA           reduce using rule 56 (length_expression -> expression POINT LENGTH .)


state 143

    (57) call_method_expression -> expression POINT IDENTIFIER . LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 160


state 144

    (41) assignment_statement -> expression ASSIGNMENT expression . SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 161
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 145

    (65) binary_expression -> expression LESS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 65 (binary_expression -> expression LESS expression .)
    LEFT_BRACKET    reduce using rule 65 (binary_expression -> expression LESS expression .)
    OR              reduce using rule 65 (binary_expression -> expression LESS expression .)
    AND             reduce using rule 65 (binary_expression -> expression LESS expression .)
    EQUAL           reduce using rule 65 (binary_expression -> expression LESS expression .)
    NOT_EQUAL       reduce using rule 65 (binary_expression -> expression LESS expression .)
    GREATER         reduce using rule 65 (binary_expression -> expression LESS expression .)
    LESS            reduce using rule 65 (binary_expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 65 (binary_expression -> expression LESS expression .)
    ASSIGNMENT      reduce using rule 65 (binary_expression -> expression LESS expression .)
    RIGHT_BRACKET   reduce using rule 65 (binary_expression -> expression LESS expression .)
    COMMA           reduce using rule 65 (binary_expression -> expression LESS expression .)
    POINT           shift and go to state 118
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 65 (binary_expression -> expression LESS expression .) ]
  ! PLUS            [ reduce using rule 65 (binary_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 65 (binary_expression -> expression LESS expression .) ]
  ! TIMES           [ reduce using rule 65 (binary_expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (binary_expression -> expression LESS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]


state 146

    (62) binary_expression -> expression EQUAL expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    LEFT_BRACKET    reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    OR              reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    AND             reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    GREATER         reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    LESS            reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    ASSIGNMENT      reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    RIGHT_BRACKET   reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 62 (binary_expression -> expression EQUAL expression .)
    POINT           shift and go to state 118
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 62 (binary_expression -> expression EQUAL expression .) ]
  ! PLUS            [ reduce using rule 62 (binary_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 62 (binary_expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 62 (binary_expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 62 (binary_expression -> expression EQUAL expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]


state 147

    (60) binary_expression -> expression OR expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 60 (binary_expression -> expression OR expression .)
    LEFT_BRACKET    reduce using rule 60 (binary_expression -> expression OR expression .)
    OR              reduce using rule 60 (binary_expression -> expression OR expression .)
    AND             reduce using rule 60 (binary_expression -> expression OR expression .)
    SEMICOLON       reduce using rule 60 (binary_expression -> expression OR expression .)
    ASSIGNMENT      reduce using rule 60 (binary_expression -> expression OR expression .)
    RIGHT_BRACKET   reduce using rule 60 (binary_expression -> expression OR expression .)
    COMMA           reduce using rule 60 (binary_expression -> expression OR expression .)
    POINT           shift and go to state 118
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 60 (binary_expression -> expression OR expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]


state 148

    (66) binary_expression -> expression PLUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 66 (binary_expression -> expression PLUS expression .)
    LEFT_BRACKET    reduce using rule 66 (binary_expression -> expression PLUS expression .)
    OR              reduce using rule 66 (binary_expression -> expression PLUS expression .)
    AND             reduce using rule 66 (binary_expression -> expression PLUS expression .)
    EQUAL           reduce using rule 66 (binary_expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 66 (binary_expression -> expression PLUS expression .)
    GREATER         reduce using rule 66 (binary_expression -> expression PLUS expression .)
    LESS            reduce using rule 66 (binary_expression -> expression PLUS expression .)
    PLUS            reduce using rule 66 (binary_expression -> expression PLUS expression .)
    MINUS           reduce using rule 66 (binary_expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 66 (binary_expression -> expression PLUS expression .)
    ASSIGNMENT      reduce using rule 66 (binary_expression -> expression PLUS expression .)
    RIGHT_BRACKET   reduce using rule 66 (binary_expression -> expression PLUS expression .)
    COMMA           reduce using rule 66 (binary_expression -> expression PLUS expression .)
    POINT           shift and go to state 118
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 66 (binary_expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 66 (binary_expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (binary_expression -> expression PLUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 149

    (67) binary_expression -> expression MINUS expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 67 (binary_expression -> expression MINUS expression .)
    LEFT_BRACKET    reduce using rule 67 (binary_expression -> expression MINUS expression .)
    OR              reduce using rule 67 (binary_expression -> expression MINUS expression .)
    AND             reduce using rule 67 (binary_expression -> expression MINUS expression .)
    EQUAL           reduce using rule 67 (binary_expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 67 (binary_expression -> expression MINUS expression .)
    GREATER         reduce using rule 67 (binary_expression -> expression MINUS expression .)
    LESS            reduce using rule 67 (binary_expression -> expression MINUS expression .)
    PLUS            reduce using rule 67 (binary_expression -> expression MINUS expression .)
    MINUS           reduce using rule 67 (binary_expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 67 (binary_expression -> expression MINUS expression .)
    ASSIGNMENT      reduce using rule 67 (binary_expression -> expression MINUS expression .)
    RIGHT_BRACKET   reduce using rule 67 (binary_expression -> expression MINUS expression .)
    COMMA           reduce using rule 67 (binary_expression -> expression MINUS expression .)
    POINT           shift and go to state 118
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126

  ! POINT           [ reduce using rule 67 (binary_expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 67 (binary_expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 67 (binary_expression -> expression MINUS expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 150

    (55) array_element_expression -> expression LEFT_BRACKET expression . RIGHT_BRACKET
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 162
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 151

    (69) binary_expression -> expression DIVIDE expression .
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    LEFT_BRACKET    reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    OR              reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    AND             reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    LESS            reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    ASSIGNMENT      reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    RIGHT_BRACKET   reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 69 (binary_expression -> expression DIVIDE expression .)
    POINT           shift and go to state 118

  ! POINT           [ reduce using rule 69 (binary_expression -> expression DIVIDE expression .) ]
  ! LEFT_BRACKET    [ shift and go to state 125 ]
  ! OR              [ shift and go to state 122 ]
  ! AND             [ shift and go to state 114 ]
  ! EQUAL           [ shift and go to state 121 ]
  ! NOT_EQUAL       [ shift and go to state 116 ]
  ! GREATER         [ shift and go to state 117 ]
  ! LESS            [ shift and go to state 120 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]
  ! TIMES           [ shift and go to state 115 ]
  ! DIVIDE          [ shift and go to state 126 ]


state 152

    (23) var -> type IDENTIFIER ASSIGNMENT expression . SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 163
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 153

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 164


state 154

    (39) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 165
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    expression                     shift and go to state 99

state 155

    (74) new_array_expression -> NEW type LEFT_BRACKET expression . RIGHT_BRACKET
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_BRACKET   shift and go to state 166
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 156

    (73) new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_BRACKET    reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    POINT           reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS            reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    ASSIGNMENT      reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 73 (new_expression -> NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 157

    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (38) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement ELSE statement
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 167
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    expression                     shift and go to state 99

state 158

    (40) print_statement -> SYSTEM POINT OUT POINT . PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    PRINTLN         shift and go to state 168


state 159

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 169


state 160

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS . expression_list RIGHT_PARENTHESIS
    (58) expression_list -> . expression
    (59) expression_list -> . expression COMMA expression_list
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    expression_list                shift and go to state 170
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 171
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 161

    (41) assignment_statement -> expression ASSIGNMENT expression SEMICOLON .

    LEFT_BRACE      reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    SYSTEM          reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NEW             reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    INTEGER_LITERAL reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    TRUE            reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    FALSE           reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    THIS            reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    NULL            reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    RIGHT_BRACE     reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)
    ELSE            reduce using rule 41 (assignment_statement -> expression ASSIGNMENT expression SEMICOLON .)


state 162

    (55) array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .

    SEMICOLON       reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 55 (array_element_expression -> expression LEFT_BRACKET expression RIGHT_BRACKET .)


state 163

    (23) var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .

    BOOLEAN         reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    INT             reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    LEFT_BRACE      reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    SYSTEM          reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NEW             reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    INTEGER_LITERAL reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    TRUE            reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    FALSE           reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    THIS            reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    NULL            reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)
    RIGHT_BRACE     reduce using rule 23 (var -> type IDENTIFIER ASSIGNMENT expression SEMICOLON .)


state 164

    (6) main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 6 (main_method -> PUBLIC STATIC VOID MAIN LEFT_PARENTHESIS STRING LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RIGHT_BRACE .)


state 165

    (39) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    LEFT_BRACE      reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SYSTEM          reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NEW             reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTEGER_LITERAL reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THIS            reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_BRACE     reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 39 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 166

    (74) new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .

    ASSIGNMENT      reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    POINT           reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    OR              reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    AND             reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    EQUAL           reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    NOT_EQUAL       reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    GREATER         reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    LESS            reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    PLUS            reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    MINUS           reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    TIMES           reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    DIVIDE          reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)
    COMMA           reduce using rule 74 (new_array_expression -> NEW type LEFT_BRACKET expression RIGHT_BRACKET .)


state 167

    (37) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (38) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LEFT_BRACE      reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SYSTEM          reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NEW             reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTEGER_LITERAL reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THIS            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_BRACE     reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 172

  ! ELSE            [ reduce using rule 37 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]


state 168

    (40) print_statement -> SYSTEM POINT OUT POINT PRINTLN . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 173


state 169

    (14) method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .

    PUBLIC          reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    BOOLEAN         reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    INT             reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (method -> PUBLIC type IDENTIFIER LEFT_PARENTHESIS params_list RIGHT_PARENTHESIS LEFT_BRACE var_list statement_list RETURN expression SEMICOLON RIGHT_BRACE .)


state 170

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 174


state 171

    (58) expression_list -> expression .
    (59) expression_list -> expression . COMMA expression_list
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS reduce using rule 58 (expression_list -> expression .)
    COMMA           shift and go to state 175
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 172

    (38) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE . statement
    (32) statement -> . LEFT_BRACE statement_list RIGHT_BRACE
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . print_statement
    (36) statement -> . assignment_statement
    (37) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (38) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (39) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (40) print_statement -> . SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (41) assignment_statement -> . expression ASSIGNMENT expression SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_BRACE      shift and go to state 69
    IF              shift and go to state 89
    WHILE           shift and go to state 68
    SYSTEM          shift and go to state 96
    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    length_expression              shift and go to state 72
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    integer_literal_expression     shift and go to state 100
    print_statement                shift and go to state 71
    new_expression                 shift and go to state 70
    parenthesis_expression         shift and go to state 76
    assignment_statement           shift and go to state 78
    array_element_expression       shift and go to state 79
    while_statement                shift and go to state 80
    statement                      shift and go to state 176
    if_statement                   shift and go to state 82
    new_array_expression           shift and go to state 83
    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    call_method_expression         shift and go to state 95
    binary_expression              shift and go to state 92
    boolean_expression             shift and go to state 93
    expression                     shift and go to state 99

state 173

    (40) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 177
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 174

    (57) call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .

    ASSIGNMENT      reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LEFT_BRACKET    reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    POINT           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    GREATER         reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    TIMES           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    RIGHT_BRACKET   reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 57 (call_method_expression -> expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS .)


state 175

    (59) expression_list -> expression COMMA . expression_list
    (58) expression_list -> . expression
    (59) expression_list -> . expression COMMA expression_list
    (42) expression -> . array_element_expression
    (43) expression -> . length_expression
    (44) expression -> . call_method_expression
    (45) expression -> . binary_expression
    (46) expression -> . parenthesis_expression
    (47) expression -> . unary_expression
    (48) expression -> . new_expression
    (49) expression -> . new_array_expression
    (50) expression -> . identifier_expression
    (51) expression -> . integer_literal_expression
    (52) expression -> . boolean_expression
    (53) expression -> . this_expression
    (54) expression -> . null_expression
    (55) array_element_expression -> . expression LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> . expression POINT LENGTH
    (57) call_method_expression -> . expression POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> . expression OR expression
    (61) binary_expression -> . expression AND expression
    (62) binary_expression -> . expression EQUAL expression
    (63) binary_expression -> . expression NOT_EQUAL expression
    (64) binary_expression -> . expression GREATER expression
    (65) binary_expression -> . expression LESS expression
    (66) binary_expression -> . expression PLUS expression
    (67) binary_expression -> . expression MINUS expression
    (68) binary_expression -> . expression TIMES expression
    (69) binary_expression -> . expression DIVIDE expression
    (70) parenthesis_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (71) unary_expression -> . MINUS expression
    (72) unary_expression -> . NOT expression
    (73) new_expression -> . NEW type LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (74) new_array_expression -> . NEW type LEFT_BRACKET expression RIGHT_BRACKET
    (75) identifier_expression -> . IDENTIFIER
    (76) integer_literal_expression -> . INTEGER_LITERAL
    (77) boolean_expression -> . TRUE
    (78) boolean_expression -> . FALSE
    (79) this_expression -> . THIS
    (80) null_expression -> . NULL

    LEFT_PARENTHESIS shift and go to state 97
    MINUS           shift and go to state 75
    NOT             shift and go to state 88
    NEW             shift and go to state 77
    IDENTIFIER      shift and go to state 90
    INTEGER_LITERAL shift and go to state 87
    TRUE            shift and go to state 74
    FALSE           shift and go to state 91
    THIS            shift and go to state 94
    NULL            shift and go to state 73

    this_expression                shift and go to state 85
    null_expression                shift and go to state 86
    length_expression              shift and go to state 72
    binary_expression              shift and go to state 92
    unary_expression               shift and go to state 66
    identifier_expression          shift and go to state 67
    expression_list                shift and go to state 178
    parenthesis_expression         shift and go to state 76
    array_element_expression       shift and go to state 79
    boolean_expression             shift and go to state 93
    integer_literal_expression     shift and go to state 100
    new_expression                 shift and go to state 70
    expression                     shift and go to state 171
    new_array_expression           shift and go to state 83
    call_method_expression         shift and go to state 95

state 176

    (38) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .

    LEFT_BRACE      reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IF              reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SYSTEM          reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_PARENTHESIS reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NOT             reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NEW             reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IDENTIFIER      reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    INTEGER_LITERAL reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TRUE            reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FALSE           reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    THIS            reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NULL            reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    RIGHT_BRACE     reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 38 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)


state 177

    (40) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON
    (55) array_element_expression -> expression . LEFT_BRACKET expression RIGHT_BRACKET
    (56) length_expression -> expression . POINT LENGTH
    (57) call_method_expression -> expression . POINT IDENTIFIER LEFT_PARENTHESIS expression_list RIGHT_PARENTHESIS
    (60) binary_expression -> expression . OR expression
    (61) binary_expression -> expression . AND expression
    (62) binary_expression -> expression . EQUAL expression
    (63) binary_expression -> expression . NOT_EQUAL expression
    (64) binary_expression -> expression . GREATER expression
    (65) binary_expression -> expression . LESS expression
    (66) binary_expression -> expression . PLUS expression
    (67) binary_expression -> expression . MINUS expression
    (68) binary_expression -> expression . TIMES expression
    (69) binary_expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 179
    LEFT_BRACKET    shift and go to state 125
    POINT           shift and go to state 118
    OR              shift and go to state 122
    AND             shift and go to state 114
    EQUAL           shift and go to state 121
    NOT_EQUAL       shift and go to state 116
    GREATER         shift and go to state 117
    LESS            shift and go to state 120
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 126


state 178

    (59) expression_list -> expression COMMA expression_list .

    RIGHT_PARENTHESIS reduce using rule 59 (expression_list -> expression COMMA expression_list .)


state 179

    (40) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 180


state 180

    (40) print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    LEFT_BRACE      reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SYSTEM          reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NOT             reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NEW             reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INTEGER_LITERAL reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRUE            reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FALSE           reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    THIS            reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_BRACE     reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 40 (print_statement -> SYSTEM POINT OUT POINT PRINTLN LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_BRACKET in state 22 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 25 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 27 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 59 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 62 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 103 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 167 resolved as shift
